/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Lexer.lex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\20\1\3\1\2\1\0\1\3\1\1\16\20\4\0\1\3\1\57"+
    "\1\56\1\6\1\27\1\26\1\60\1\25\1\4\1\14\1\15\1\13"+
    "\1\70\1\23\1\16\1\5\1\22\11\24\1\64\1\67\1\61\1\62"+
    "\1\63\2\0\5\27\1\55\15\27\1\54\6\27\1\7\1\71\1\11"+
    "\1\10\1\21\1\0\1\34\1\45\1\41\1\40\1\43\1\35\1\27"+
    "\1\47\1\30\1\27\1\52\1\36\1\53\1\31\1\37\1\46\1\44"+
    "\1\33\1\42\1\32\1\50\1\27\1\51\3\27\1\65\1\12\1\66"+
    "\1\0\41\20\2\0\4\17\4\0\1\17\2\0\1\20\7\0\1\17"+
    "\4\0\1\17\5\0\27\17\1\0\37\17\1\0\u01ca\17\4\0\14\17"+
    "\16\0\5\17\7\0\1\17\1\0\1\17\21\0\160\20\5\17\1\0"+
    "\2\17\2\0\4\17\10\0\1\17\1\0\3\17\1\0\1\17\1\0"+
    "\24\17\1\0\123\17\1\0\213\17\1\0\5\20\2\0\236\17\11\0"+
    "\46\17\2\0\1\17\7\0\47\17\7\0\1\17\1\0\55\20\1\0"+
    "\1\20\1\0\2\20\1\0\2\20\1\0\1\20\10\0\33\17\5\0"+
    "\3\17\15\0\5\20\6\0\1\17\4\0\13\20\5\0\53\17\37\20"+
    "\4\0\2\17\1\20\143\17\1\0\1\17\10\20\1\0\6\20\2\17"+
    "\2\20\1\0\4\20\2\17\12\20\3\17\2\0\1\17\17\0\1\20"+
    "\1\17\1\20\36\17\33\20\2\0\131\17\13\20\1\17\16\0\12\20"+
    "\41\17\11\20\2\17\4\0\1\17\5\0\26\17\4\20\1\17\11\20"+
    "\1\17\3\20\1\17\5\20\22\0\31\17\3\20\104\0\1\17\1\0"+
    "\13\17\67\0\33\20\1\0\4\20\66\17\3\20\1\17\22\20\1\17"+
    "\7\20\12\17\2\20\2\0\12\20\1\0\7\17\1\0\7\17\1\0"+
    "\3\20\1\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17\1\0"+
    "\1\17\3\0\4\17\2\0\1\20\1\17\7\20\2\0\2\20\2\0"+
    "\3\20\1\17\10\0\1\20\4\0\2\17\1\0\3\17\2\20\2\0"+
    "\12\20\4\17\7\0\1\17\5\0\3\20\1\0\6\17\4\0\2\17"+
    "\2\0\26\17\1\0\7\17\1\0\2\17\1\0\2\17\1\0\2\17"+
    "\2\0\1\20\1\0\5\20\4\0\2\20\2\0\3\20\3\0\1\20"+
    "\7\0\4\17\1\0\1\17\7\0\14\20\3\17\1\20\13\0\3\20"+
    "\1\0\11\17\1\0\3\17\1\0\26\17\1\0\7\17\1\0\2\17"+
    "\1\0\5\17\2\0\1\20\1\17\10\20\1\0\3\20\1\0\3\20"+
    "\2\0\1\17\17\0\2\17\2\20\2\0\12\20\1\0\1\17\17\0"+
    "\3\20\1\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17\1\0"+
    "\2\17\1\0\5\17\2\0\1\20\1\17\7\20\2\0\2\20\2\0"+
    "\3\20\10\0\2\20\4\0\2\17\1\0\3\17\2\20\2\0\12\20"+
    "\1\0\1\17\20\0\1\20\1\17\1\0\6\17\3\0\3\17\1\0"+
    "\4\17\3\0\2\17\1\0\1\17\1\0\2\17\3\0\2\17\3\0"+
    "\3\17\3\0\14\17\4\0\5\20\3\0\3\20\1\0\4\20\2\0"+
    "\1\17\6\0\1\20\16\0\12\20\11\0\1\17\7\0\3\20\1\0"+
    "\10\17\1\0\3\17\1\0\27\17\1\0\12\17\1\0\5\17\3\0"+
    "\1\17\7\20\1\0\3\20\1\0\4\20\7\0\2\20\1\0\2\17"+
    "\6\0\2\17\2\20\2\0\12\20\22\0\2\20\1\0\10\17\1\0"+
    "\3\17\1\0\27\17\1\0\12\17\1\0\5\17\2\0\1\20\1\17"+
    "\7\20\1\0\3\20\1\0\4\20\7\0\2\20\7\0\1\17\1\0"+
    "\2\17\2\20\2\0\12\20\1\0\2\17\17\0\2\20\1\0\10\17"+
    "\1\0\3\17\1\0\51\17\2\0\1\17\7\20\1\0\3\20\1\0"+
    "\4\20\1\17\10\0\1\20\10\0\2\17\2\20\2\0\12\20\12\0"+
    "\6\17\2\0\2\20\1\0\22\17\3\0\30\17\1\0\11\17\1\0"+
    "\1\17\2\0\7\17\3\0\1\20\4\0\6\20\1\0\1\20\1\0"+
    "\10\20\22\0\2\20\15\0\60\17\1\20\2\17\7\20\4\0\10\17"+
    "\10\20\1\0\12\20\47\0\2\17\1\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\1\17\6\0\4\17\1\0\7\17\1\0\3\17\1\0"+
    "\1\17\1\0\1\17\2\0\2\17\1\0\4\17\1\20\2\17\6\20"+
    "\1\0\2\20\1\17\2\0\5\17\1\0\1\17\1\0\6\20\2\0"+
    "\12\20\2\0\4\17\40\0\1\17\27\0\2\20\6\0\12\20\13\0"+
    "\1\20\1\0\1\20\1\0\1\20\4\0\2\20\10\17\1\0\44\17"+
    "\4\0\24\20\1\0\2\20\5\17\13\20\1\0\44\20\11\0\1\20"+
    "\71\0\53\17\24\20\1\17\12\20\6\0\6\17\4\20\4\17\3\20"+
    "\1\17\3\20\2\17\7\20\3\17\4\20\15\17\14\20\1\17\17\20"+
    "\2\0\46\17\1\0\1\17\5\0\1\17\2\0\53\17\1\0\u014d\17"+
    "\1\0\4\17\2\0\7\17\1\0\1\17\1\0\4\17\2\0\51\17"+
    "\1\0\4\17\2\0\41\17\1\0\4\17\2\0\7\17\1\0\1\17"+
    "\1\0\4\17\2\0\17\17\1\0\71\17\1\0\4\17\2\0\103\17"+
    "\2\0\3\20\40\0\20\17\20\0\125\17\14\0\u026c\17\2\0\21\17"+
    "\1\0\32\17\5\0\113\17\3\0\3\17\17\0\15\17\1\0\4\17"+
    "\3\20\13\0\22\17\3\20\13\0\22\17\2\20\14\0\15\17\1\0"+
    "\3\17\1\0\2\20\14\0\64\17\40\20\3\0\1\17\3\0\2\17"+
    "\1\20\2\0\12\20\41\0\3\20\2\0\12\20\6\0\130\17\10\0"+
    "\51\17\1\20\1\17\5\0\106\17\12\0\35\17\3\0\14\20\4\0"+
    "\14\20\12\0\12\20\36\17\2\0\5\17\13\0\54\17\4\0\21\20"+
    "\7\17\2\20\6\0\12\20\46\0\27\17\5\20\4\0\65\17\12\20"+
    "\1\0\35\20\2\0\13\20\6\0\12\20\15\0\1\17\130\0\5\20"+
    "\57\17\21\20\7\17\4\0\12\20\21\0\11\20\14\0\3\20\36\17"+
    "\15\20\2\17\12\20\54\17\16\20\14\0\44\17\24\20\10\0\12\20"+
    "\3\0\3\17\12\20\44\17\122\0\3\20\1\0\25\20\4\17\1\20"+
    "\4\17\3\20\2\17\11\0\300\17\47\20\25\0\4\20\u0116\17\2\0"+
    "\6\17\2\0\46\17\2\0\6\17\2\0\10\17\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\1\0\37\17\2\0\65\17\1\0\7\17\1\0"+
    "\1\17\3\0\3\17\1\0\7\17\3\0\4\17\2\0\6\17\4\0"+
    "\15\17\5\0\3\17\1\0\7\17\16\0\5\20\32\0\5\20\20\0"+
    "\2\17\23\0\1\17\13\0\5\20\5\0\6\20\1\0\1\17\15\0"+
    "\1\17\20\0\15\17\3\0\33\17\25\0\15\20\4\0\1\20\3\0"+
    "\14\20\21\0\1\17\4\0\1\17\2\0\12\17\1\0\1\17\3\0"+
    "\5\17\6\0\1\17\1\0\1\17\1\0\1\17\1\0\4\17\1\0"+
    "\13\17\2\0\4\17\5\0\5\17\4\0\1\17\21\0\51\17\u0a77\0"+
    "\57\17\1\0\57\17\1\0\205\17\6\0\4\17\3\20\2\17\14\0"+
    "\46\17\1\0\1\17\5\0\1\17\2\0\70\17\7\0\1\17\17\0"+
    "\1\20\27\17\11\0\7\17\1\0\7\17\1\0\7\17\1\0\7\17"+
    "\1\0\7\17\1\0\7\17\1\0\7\17\1\0\7\17\1\0\40\20"+
    "\57\0\1\17\u01d5\0\3\17\31\0\11\17\6\20\1\0\5\17\2\0"+
    "\5\17\4\0\126\17\2\0\2\20\2\0\3\17\1\0\132\17\1\0"+
    "\4\17\5\0\51\17\3\0\136\17\21\0\33\17\65\0\20\17\u0200\0"+
    "\u19b6\17\112\0\u51cd\17\63\0\u048d\17\103\0\56\17\2\0\u010d\17\3\0"+
    "\20\17\12\20\2\17\24\0\57\17\1\20\4\0\12\20\1\0\31\17"+
    "\7\0\1\20\120\17\2\20\45\0\11\17\2\0\147\17\2\0\4\17"+
    "\1\0\4\17\14\0\13\17\115\0\12\17\1\20\3\17\1\20\4\17"+
    "\1\20\27\17\5\20\20\0\1\17\7\0\64\17\14\0\2\20\62\17"+
    "\21\20\13\0\12\20\6\0\22\20\6\17\3\0\1\17\4\0\12\20"+
    "\34\17\10\20\2\0\27\17\15\20\14\0\35\17\3\0\4\20\57\17"+
    "\16\20\16\0\1\17\12\20\46\0\51\17\16\20\11\0\3\17\1\20"+
    "\10\17\2\20\2\0\12\20\6\0\27\17\3\0\1\17\1\20\4\0"+
    "\60\17\1\20\1\17\3\20\2\17\2\20\5\17\2\20\1\17\1\20"+
    "\1\17\30\0\3\17\2\0\13\17\5\20\2\0\3\17\2\20\12\0"+
    "\6\17\2\0\6\17\2\0\6\17\11\0\7\17\1\0\7\17\221\0"+
    "\43\17\10\20\1\0\2\20\2\0\12\20\6\0\u2ba4\17\14\0\27\17"+
    "\4\0\61\17\u2104\0\u016e\17\2\0\152\17\46\0\7\17\14\0\5\17"+
    "\5\0\1\17\1\20\12\17\1\0\15\17\1\0\5\17\1\0\1\17"+
    "\1\0\2\17\1\0\2\17\1\0\154\17\41\0\u016b\17\22\0\100\17"+
    "\2\0\66\17\50\0\15\17\3\0\20\20\20\0\7\20\14\0\2\17"+
    "\30\0\3\17\31\0\1\17\6\0\5\17\1\0\207\17\2\0\1\20"+
    "\4\0\1\17\13\0\12\20\7\0\32\17\4\0\1\17\1\0\32\17"+
    "\13\0\131\17\3\0\6\17\2\0\6\17\2\0\6\17\2\0\3\17"+
    "\3\0\2\17\3\0\2\17\22\0\3\20\4\0\14\17\1\0\32\17"+
    "\1\0\23\17\1\0\2\17\1\0\17\17\2\0\16\17\42\0\173\17"+
    "\105\0\65\17\210\0\1\20\202\0\35\17\3\0\61\17\57\0\37\17"+
    "\21\0\33\17\65\0\36\17\2\0\44\17\4\0\10\17\1\0\5\17"+
    "\52\0\236\17\2\0\12\20\u0356\0\6\17\2\0\1\17\1\0\54\17"+
    "\1\0\2\17\3\0\1\17\2\0\27\17\252\0\26\17\12\0\32\17"+
    "\106\0\70\17\6\0\2\17\100\0\1\17\3\20\1\0\2\20\5\0"+
    "\4\20\4\17\1\0\3\17\1\0\33\17\4\0\3\20\4\0\1\20"+
    "\40\0\35\17\203\0\66\17\12\0\26\17\12\0\23\17\215\0\111\17"+
    "\u03b7\0\3\20\65\17\17\20\37\0\12\20\20\0\3\20\55\17\13\20"+
    "\2\0\1\20\22\0\31\17\7\0\12\20\6\0\3\20\44\17\16\20"+
    "\1\0\12\20\100\0\3\20\60\17\16\20\4\17\13\0\12\20\u04a6\0"+
    "\53\17\15\20\10\0\12\20\u0936\0\u036f\17\221\0\143\17\u0b9d\0\u042f\17"+
    "\u33d1\0\u0239\17\u04c7\0\105\17\13\0\1\17\56\20\20\0\4\20\15\17"+
    "\u4060\0\2\17\u2163\0\5\20\3\0\26\20\2\0\7\20\36\0\4\20"+
    "\224\0\3\20\u01bb\0\125\17\1\0\107\17\1\0\2\17\2\0\1\17"+
    "\2\0\2\17\2\0\4\17\1\0\14\17\1\0\1\17\1\0\7\17"+
    "\1\0\101\17\1\0\4\17\2\0\10\17\1\0\7\17\1\0\34\17"+
    "\1\0\4\17\1\0\5\17\1\0\1\17\3\0\7\17\1\0\u0154\17"+
    "\2\0\31\17\1\0\31\17\1\0\37\17\1\0\31\17\1\0\37\17"+
    "\1\0\31\17\1\0\37\17\1\0\31\17\1\0\37\17\1\0\31\17"+
    "\1\0\10\17\2\0\62\20\u1600\0\4\17\1\0\33\17\1\0\2\17"+
    "\1\0\1\17\2\0\1\17\1\0\12\17\1\0\4\17\1\0\1\17"+
    "\1\0\1\17\6\0\1\17\4\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\3\17\1\0\2\17\1\0\1\17\2\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\2\17\1\0\1\17"+
    "\2\0\4\17\1\0\7\17\1\0\4\17\1\0\4\17\1\0\1\17"+
    "\1\0\12\17\1\0\21\17\5\0\3\17\1\0\5\17\1\0\21\17"+
    "\u1144\0\ua6d7\17\51\0\u1035\17\13\0\336\17\u3fe2\0\u021e\17\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\20\36\0\140\20\200\0\360\20\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\15"+
    "\1\1\15\14\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\1\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\0\1\36\3\0\1\14\1\37\6\14"+
    "\1\40\4\14\1\41\1\14\1\42\7\14\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\0\2\56\2\57\1\60\1\61\1\62\3\14"+
    "\1\63\10\14\1\64\1\65\7\14\1\0\1\66\1\14"+
    "\1\67\1\14\1\70\3\14\1\71\1\14\1\72\1\73"+
    "\1\74\1\14\1\75\2\14\1\76\1\0\2\14\1\77"+
    "\1\100\2\14\1\101\1\102\1\103\1\0\1\104\1\105"+
    "\1\106\1\14\1\0\1\14\1\0\1\107\41\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\164\0\350\0\164\0\164"+
    "\0\164\0\164\0\u0122\0\164\0\164\0\164\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u015c\0\u015c\0\164\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658"+
    "\0\u0692\0\164\0\164\0\164\0\164\0\u06cc\0\164\0\u0706"+
    "\0\u0740\0\164\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u015c\0\u0862"+
    "\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u015c\0\u09be\0\u09f8"+
    "\0\u0a32\0\u0a6c\0\u015c\0\u0aa6\0\u015c\0\u0ae0\0\u0b1a\0\u0b54"+
    "\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\164\0\164\0\164\0\164"+
    "\0\164\0\164\0\164\0\164\0\164\0\164\0\164\0\u0c76"+
    "\0\164\0\u0cb0\0\164\0\u0cea\0\164\0\u015c\0\u015c\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u015c\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\u015c\0\u015c\0\u0fa2\0\u0fdc\0\u1016"+
    "\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u015c\0\u1172\0\u015c"+
    "\0\u11ac\0\u015c\0\u11e6\0\u1220\0\u125a\0\u015c\0\u1294\0\u015c"+
    "\0\u015c\0\u015c\0\u12ce\0\u015c\0\u1308\0\u1342\0\u015c\0\u137c"+
    "\0\u13b6\0\u13f0\0\u015c\0\u015c\0\u142a\0\u1464\0\u015c\0\u015c"+
    "\0\u015c\0\u149e\0\u015c\0\u015c\0\u015c\0\u14d8\0\u1512\0\u154c"+
    "\0\u1586\0\u015c\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2"+
    "\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2"+
    "\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82"+
    "\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52"+
    "\0\u1c8c\0\u1cc6\0\u1d00";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\3\1\17\1\3"+
    "\1\17\1\20\1\21\1\22\1\23\1\3\1\17\1\24"+
    "\1\17\1\25\1\26\1\27\1\30\1\17\1\31\1\32"+
    "\1\17\1\33\1\34\1\17\1\35\1\36\2\17\1\37"+
    "\1\17\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\3"+
    "\1\56\2\3\53\56\1\57\12\56\1\60\74\0\1\5"+
    "\74\0\1\61\76\0\1\62\76\0\4\17\1\0\1\17"+
    "\2\0\27\17\21\0\1\63\10\0\1\64\77\0\1\22"+
    "\52\0\1\63\10\0\1\64\2\0\2\22\1\0\1\22"+
    "\51\0\3\65\4\0\4\65\3\0\37\65\7\0\1\65"+
    "\20\0\4\17\1\0\1\17\2\0\2\17\1\66\3\17"+
    "\1\67\20\17\33\0\4\17\1\0\1\17\2\0\10\17"+
    "\1\70\1\71\6\17\1\72\6\17\33\0\4\17\1\0"+
    "\1\17\2\0\5\17\1\73\6\17\1\74\12\17\33\0"+
    "\4\17\1\0\1\17\2\0\7\17\1\75\17\17\33\0"+
    "\4\17\1\0\1\17\2\0\1\17\1\76\5\17\1\77"+
    "\1\100\1\101\7\17\1\102\5\17\33\0\4\17\1\0"+
    "\1\17\2\0\11\17\1\103\15\17\33\0\4\17\1\0"+
    "\1\17\2\0\1\17\1\104\6\17\1\105\16\17\33\0"+
    "\4\17\1\0\1\17\2\0\14\17\1\106\12\17\33\0"+
    "\4\17\1\0\1\17\2\0\7\17\1\107\17\17\33\0"+
    "\4\17\1\0\1\17\2\0\4\17\1\110\3\17\1\111"+
    "\16\17\33\0\4\17\1\0\1\17\2\0\4\17\1\112"+
    "\22\17\33\0\4\17\1\0\1\17\2\0\20\17\1\113"+
    "\6\17\33\0\4\17\1\0\1\17\2\0\5\17\1\114"+
    "\21\17\76\0\1\115\67\0\1\116\73\0\1\117\71\0"+
    "\1\120\71\0\1\121\71\0\1\122\1\0\1\123\5\0"+
    "\1\56\2\0\53\56\1\0\12\56\32\0\1\124\1\125"+
    "\1\126\22\0\1\127\21\0\1\130\105\0\1\131\1\0"+
    "\1\132\67\0\1\133\1\0\1\134\72\0\1\135\63\0"+
    "\4\17\1\0\1\17\2\0\3\17\1\136\23\17\33\0"+
    "\4\17\1\0\1\17\2\0\17\17\1\137\7\17\33\0"+
    "\4\17\1\0\1\17\2\0\14\17\1\140\12\17\33\0"+
    "\4\17\1\0\1\17\2\0\4\17\1\141\7\17\1\142"+
    "\12\17\33\0\4\17\1\0\1\17\2\0\3\17\1\143"+
    "\23\17\33\0\4\17\1\0\1\17\2\0\3\17\1\144"+
    "\1\17\1\145\21\17\33\0\4\17\1\0\1\17\2\0"+
    "\1\17\1\146\25\17\33\0\4\17\1\0\1\17\2\0"+
    "\10\17\1\147\16\17\33\0\4\17\1\0\1\17\2\0"+
    "\4\17\1\150\22\17\33\0\4\17\1\0\1\17\2\0"+
    "\14\17\1\151\12\17\33\0\4\17\1\0\1\17\2\0"+
    "\2\17\1\152\24\17\33\0\4\17\1\0\1\17\2\0"+
    "\12\17\1\153\14\17\33\0\4\17\1\0\1\17\2\0"+
    "\3\17\1\154\11\17\1\155\11\17\33\0\4\17\1\0"+
    "\1\17\2\0\1\17\1\156\11\17\1\157\13\17\33\0"+
    "\4\17\1\0\1\17\2\0\14\17\1\160\12\17\33\0"+
    "\4\17\1\0\1\17\2\0\10\17\1\161\16\17\33\0"+
    "\4\17\1\0\1\17\2\0\1\17\1\162\25\17\33\0"+
    "\4\17\1\0\1\17\2\0\1\17\1\163\25\17\33\0"+
    "\4\17\1\0\1\17\2\0\1\17\1\164\25\17\20\0"+
    "\1\165\106\0\2\132\1\0\1\132\66\0\2\134\1\0"+
    "\1\134\64\0\4\17\1\0\1\17\2\0\6\17\1\166"+
    "\20\17\33\0\4\17\1\0\1\17\2\0\14\17\1\167"+
    "\12\17\33\0\4\17\1\0\1\17\2\0\2\17\1\170"+
    "\24\17\33\0\4\17\1\0\1\17\2\0\21\17\1\171"+
    "\5\17\33\0\4\17\1\0\1\17\2\0\11\17\1\172"+
    "\15\17\33\0\4\17\1\0\1\17\2\0\5\17\1\173"+
    "\21\17\33\0\4\17\1\0\1\17\2\0\5\17\1\174"+
    "\21\17\33\0\4\17\1\0\1\17\2\0\5\17\1\175"+
    "\21\17\33\0\4\17\1\0\1\17\2\0\6\17\1\176"+
    "\20\17\33\0\4\17\1\0\1\17\2\0\12\17\1\177"+
    "\14\17\33\0\4\17\1\0\1\17\2\0\3\17\1\200"+
    "\23\17\33\0\4\17\1\0\1\17\2\0\6\17\1\201"+
    "\20\17\33\0\4\17\1\0\1\17\2\0\14\17\1\202"+
    "\12\17\33\0\4\17\1\0\1\17\2\0\5\17\1\203"+
    "\21\17\33\0\4\17\1\0\1\17\2\0\7\17\1\204"+
    "\17\17\33\0\4\17\1\0\1\17\2\0\2\17\1\205"+
    "\24\17\33\0\4\17\1\0\1\17\2\0\7\17\1\206"+
    "\17\17\33\0\4\17\1\0\1\17\2\0\2\17\1\207"+
    "\24\17\23\0\1\210\101\0\4\17\1\0\1\17\2\0"+
    "\5\17\1\211\21\17\33\0\4\17\1\0\1\17\2\0"+
    "\4\17\1\212\22\17\33\0\4\17\1\0\1\17\2\0"+
    "\13\17\1\213\13\17\33\0\4\17\1\0\1\17\2\0"+
    "\3\17\1\214\23\17\33\0\4\17\1\0\1\17\2\0"+
    "\7\17\1\215\17\17\33\0\4\17\1\0\1\17\2\0"+
    "\3\17\1\216\23\17\33\0\4\17\1\0\1\17\2\0"+
    "\23\17\1\217\3\17\33\0\4\17\1\0\1\17\2\0"+
    "\3\17\1\220\23\17\33\0\4\17\1\0\1\17\2\0"+
    "\14\17\1\221\12\17\24\0\1\222\100\0\4\17\1\0"+
    "\1\17\2\0\11\17\1\223\15\17\33\0\4\17\1\0"+
    "\1\17\2\0\2\17\1\224\24\17\33\0\4\17\1\0"+
    "\1\17\2\0\7\17\1\225\17\17\33\0\4\17\1\0"+
    "\1\17\2\0\1\17\1\226\25\17\22\0\1\227\102\0"+
    "\4\17\1\0\1\17\2\0\10\17\1\230\16\17\25\0"+
    "\1\231\77\0\4\17\1\0\1\17\2\0\2\17\1\232"+
    "\24\17\26\0\1\233\66\0\1\234\63\0\1\235\72\0"+
    "\1\236\100\0\1\237\72\0\1\240\63\0\1\241\73\0"+
    "\1\242\76\0\1\243\62\0\1\244\74\0\1\245\72\0"+
    "\1\246\67\0\1\247\70\0\1\250\75\0\1\251\72\0"+
    "\1\252\66\0\1\253\63\0\1\254\72\0\1\255\100\0"+
    "\1\256\74\0\1\257\71\0\1\260\71\0\1\261\72\0"+
    "\1\262\62\0\1\263\76\0\1\264\63\0\1\265\100\0"+
    "\1\266\67\0\1\267\63\0\1\270\73\0\1\271\101\0"+
    "\1\272\70\0\1\273\70\0\1\5\55\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7482];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\4\11\1\1\3\11"+
    "\24\1\1\11\6\1\4\11\1\1\1\11\1\1\1\0"+
    "\1\11\3\0\27\1\13\11\1\0\1\11\1\1\1\11"+
    "\1\1\1\11\27\1\1\0\22\1\1\0\11\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\41\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2856) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <"+yytext()+">");
            }
          case 72: break;
          case 2: 
            { /* ignore */
            }
          case 73: break;
          case 3: 
            { return symbol(sym.L_SOFT_PAREN);
            }
          case 74: break;
          case 4: 
            { return symbol(sym.DIVISION);
            }
          case 75: break;
          case 5: 
            { return symbol(sym.L_SQ_PAREN);
            }
          case 76: break;
          case 6: 
            { return symbol(sym.POWER);
            }
          case 77: break;
          case 7: 
            { return symbol(sym.R_SQ_PAREN);
            }
          case 78: break;
          case 8: 
            { return symbol(sym.SET_UNION);
            }
          case 79: break;
          case 9: 
            { return symbol(sym.PLUS);
            }
          case 80: break;
          case 10: 
            { return symbol(sym.R_SOFT_PAREN);
            }
          case 81: break;
          case 11: 
            { return symbol(sym.MULTI);
            }
          case 82: break;
          case 12: 
            { return symbol(sym.IDENTIFIER);
            }
          case 83: break;
          case 13: 
            { return symbol(sym.INTEGER_LITERAL);
            }
          case 84: break;
          case 14: 
            { return symbol(sym.MINUS);
            }
          case 85: break;
          case 15: 
            { return symbol(sym.TRUE);
            }
          case 86: break;
          case 16: 
            { return symbol(sym.FALSE);
            }
          case 87: break;
          case 17: 
            { string.setLength(0); yybegin(STRING);
            }
          case 88: break;
          case 18: 
            { return symbol(sym.NOT);
            }
          case 89: break;
          case 19: 
            { return symbol(sym.SET_INTSECT);
            }
          case 90: break;
          case 20: 
            { return symbol(sym.L_TRI_PAREN);
            }
          case 91: break;
          case 21: 
            { return symbol(sym.R_TRI_PAREN);
            }
          case 92: break;
          case 22: 
            { return symbol(sym.COLON);
            }
          case 93: break;
          case 23: 
            { return symbol(sym.L_CURL_PAREN);
            }
          case 94: break;
          case 24: 
            { return symbol(sym.R_CURL_PAREN);
            }
          case 95: break;
          case 25: 
            { return symbol(sym.SEMI);
            }
          case 96: break;
          case 26: 
            { return symbol(sym.COMMA);
            }
          case 97: break;
          case 27: 
            { string.append( yytext() );
            }
          case 98: break;
          case 28: 
            { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, string.toString());
            }
          case 99: break;
          case 29: 
            { string.append('\\');
            }
          case 100: break;
          case 30: 
            { return symbol(sym.OR);
            }
          case 101: break;
          case 31: 
            { return symbol(sym.IF);
            }
          case 102: break;
          case 32: 
            { return symbol(sym.FI);
            }
          case 103: break;
          case 33: 
            { return symbol(sym.OD);
            }
          case 104: break;
          case 34: 
            { return symbol(sym.DO);
            }
          case 105: break;
          case 35: 
            { return symbol(sym.NOT_EQ);
            }
          case 106: break;
          case 36: 
            { return symbol(sym.AND);
            }
          case 107: break;
          case 37: 
            { return symbol(sym.SMALLER_EQ);
            }
          case 108: break;
          case 38: 
            { return symbol(sym.EQUAL);
            }
          case 109: break;
          case 39: 
            { return symbol(sym.BIGGER_EQ);
            }
          case 110: break;
          case 40: 
            { return symbol(sym.ASSIGN);
            }
          case 111: break;
          case 41: 
            { return symbol(sym.SEQ_CONCAT);
            }
          case 112: break;
          case 42: 
            { string.append('\n');
            }
          case 113: break;
          case 43: 
            { string.append('\t');
            }
          case 114: break;
          case 44: 
            { string.append('\r');
            }
          case 115: break;
          case 45: 
            { string.append('\"');
            }
          case 116: break;
          case 46: 
            { return symbol(sym.RATIONAL_LITERAL);
            }
          case 117: break;
          case 47: 
            { return symbol(sym.FLOAT_LITERAL);
            }
          case 118: break;
          case 48: 
            { return symbol(sym.CHAR_LITERAL);
            }
          case 119: break;
          case 49: 
            { return symbol(sym.INTEGER);
            }
          case 120: break;
          case 50: 
            { return symbol(sym.TOP);
            }
          case 121: break;
          case 51: 
            { return symbol(sym.RATIONAL);
            }
          case 122: break;
          case 52: 
            { return symbol(sym.SET);
            }
          case 123: break;
          case 53: 
            { return symbol(sym.SEQUENCE);
            }
          case 124: break;
          case 54: 
            { return symbol(sym.TYPE_DEF);
            }
          case 125: break;
          case 55: 
            { return symbol(sym.THEN);
            }
          case 126: break;
          case 56: 
            { return symbol(sym.READ);
            }
          case 127: break;
          case 57: 
            { return symbol(sym.FUN_DEF);
            }
          case 128: break;
          case 58: 
            { return symbol(sym.DICTIONARY);
            }
          case 129: break;
          case 59: 
            { return symbol(sym.ELIF);
            }
          case 130: break;
          case 60: 
            { return symbol(sym.ELSE);
            }
          case 131: break;
          case 61: 
            { return symbol(sym.BOOLEAN);
            }
          case 132: break;
          case 62: 
            { return symbol(sym.MAIN);
            }
          case 133: break;
          case 63: 
            { return symbol(sym.ALIAS);
            }
          case 134: break;
          case 64: 
            { return symbol(sym.FLOAT);
            }
          case 135: break;
          case 65: 
            { return symbol(sym.BREAK);
            }
          case 136: break;
          case 66: 
            { return symbol(sym.PRINT);
            }
          case 137: break;
          case 67: 
            { return symbol(sym.WHILE);
            }
          case 138: break;
          case 68: 
            { return symbol(sym.THREAD);
            }
          case 139: break;
          case 69: 
            { return symbol(sym.RETURN);
            }
          case 140: break;
          case 70: 
            { return symbol(sym.FORALL);
            }
          case 141: break;
          case 71: 
            { return symbol(sym.FUNCTION);
            }
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
