import java_cup.runtime.*;
import java.util.*;

parser code {:
  public boolean syntaxErrors;

  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }

  public void syntax_error(Symbol current_token) {
    syntaxErrors = true;
    report_error( "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null);
  }

:};

terminal PLUS, TIMES, LPAREN, RPAREN, ID, SEMI;
non terminal expr_list, expr_stmt, expr;

precedence left PLUS, MINUS;
precedence left TIMES;
precedence right POWER;
precedence assosciative EQ;


expr_list ::= expr_list expr_stmt
 | expr_stmt
 ;


expr_stmt ::= expr SEMI
 | error SEMI
 ;


expr ::= expr PLUS expr
 | expr TIMES expr
 | expr MINUS expr
 | expr POWER expr
 |
 | LPAREN expr RPAREN
 | ID
 ;


/* Do I need to worry about int i = "abc" ???  */

 seq ::= L_TRI_PAREN type R_TRI_PAREN name
  | expr


 return ::= RETURN expr



 id ::= char
  | string
  | float
  | int
  | rational
  | set
  | seq
  | user_defined_variable

 logic_expr ::= id comp_operator id
  | function

 function_call ::=

 compound_stmnt ::= WHILE L_SOFT_PAREN user_defined_variable IN expr R_SOFT_PAREN DO stmnt_list OD
  | FORALL expr DO stmt_list OD
  | IF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list FI
  | IF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list elif
  | IF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list ELSE stmnt_list FI
  | IF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list elif ELSE stmnt_list FI

 elif ::= ELIF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list FI
  | ELIF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list elif




/* Non terminals */
non terminal Program        program;
non terminal List<Decl>     decllist;
non terminal Decl           decl;
non terminal List<Stmt>     stmtlist;
non terminal List<Expr.Identifier>   identlist;
non terminal Stmt           stmt;
non terminal Expr           expr;
non terminal Cond           cond;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;


precedence left ELSE, UNOP, BINOP, BUNOP, BBINOP;

program   ::=  decllist:d stmtlist:s                        {: RESULT = new Program(d,s); :}
    ;
decllist  ::=  decl:d decllist:dl                           {: dl.add(d); RESULT = dl; :}
    | /* empty decllist */                                  {: RESULT = new LinkedList<Decl>(); :}
    ;
stmtlist  ::= stmtlist:sl stmt:s                            {: sl.add(s); RESULT = sl; :}
    | /* empty stmtlist */                                  {: RESULT = new LinkedList<Stmt>(); :}
    ;
decl ::= TYPE IDENT:i identlist:il  SEMICOLON               {: il.add(0,Expr.ident(ixleft,i,ixright));
                                                               RESULT = new Decl(il); :}
    ;
identlist  ::= identlist:il COMMA IDENT:i                   {: il.add(Expr.ident(ixleft,i,ixright)); RESULT = il; :}
    | /* empty identlist*/                                  {: RESULT = new LinkedList<Expr.Identifier>(); :}
    ;
stmt ::= SEMICOLON                                          {: RESULT = Stmt.empty(); :}
    | BEGIN stmtlist:sl END                                 {: RESULT = Stmt.compound(sl); :}
    | IDENT:i ASSIGN expr:e SEMICOLON                       {: RESULT = Stmt.assign(ixleft,i,e,ixright); :}
    | IDENT:i ASSIGN READ LPAR RPAR SEMICOLON               {: RESULT = Stmt.read(ixleft,i,ixright); :}
    | IDENT:i ASSIGN READ LPAR STRINGCONST:s RPAR SEMICOLON {: RESULT = Stmt.read(ixleft,i,s,ixright); :}
    | WRITE LPAR expr:e RPAR SEMICOLON                      {: RESULT = Stmt.write(e); :}
    | WRITE LPAR STRINGCONST:s RPAR SEMICOLON               {: RESULT = Stmt.write(s); :}
    | IF LPAR cond:c RPAR stmt:s                            {: RESULT = Stmt.ifthen(c,s); :}
    | IF LPAR cond:c RPAR stmt:t ELSE stmt:e                {: RESULT = Stmt.ifthenelse(c,t,e); :}
    | WHILE LPAR cond:c RPAR stmt:s                         {: RESULT = Stmt.whileloop(c,s); :}
    | error:e                                               {: parser.report_error("Syntax error, skip rest",e); :}
    ;
cond ::= BOOLCONST:c                                        {: RESULT = Cond.boolconst(c); :}
    | LPAR cond:c RPAR                                      {: RESULT = Cond.priority(c); :}
    | expr:e1 COMP:op expr:e2                               {: RESULT = Cond.binop(e1,op,e2); :}
    | BUNOP cond:c                                          {: RESULT = Cond.unop(c); :}
    | cond:c1 BBINOP:op cond:c2                             {: RESULT = Cond.binop(c1,op,c2); :}
    ;
/* Yes, this grammar does not adhere to precedence of multiplication over addition                             */
/* This is due to the fact that it is introduced with an ambiguous grammar in the lecture, and was never fixed */
expr ::= IDENT:i                                            {: RESULT = Expr.ident(ixleft,i,ixright); :}
    | INTCONST:c                                            {: RESULT = Expr.intconst(c); :}
    | LPAR expr:e RPAR                                      {: RESULT = Expr.priority(e); :}
    | BINOP expr:e                                          {: RESULT = Expr.unop(e); :}
    | expr:e1 BINOP:op expr:e2                              {: RESULT = Expr.binop(e1,op,e2); :}
    ;