import java_cup.runtime.*;

parser code {:
  public boolean syntaxErrors;

  public void syntax_error(Symbol current_token) {
    //syntaxErrors = true;
    report_error( "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right + " " + current_token.value + "\n", null);
  }

:};

//global operators
terminal ASSIGN, SEMI, COMMA, COLON, DOT, PIPE, ARROW;

//parentases
terminal L_SOFT_PAREN, L_TRI_PAREN, L_SQ_PAREN, L_CURL_PAREN;
terminal R_SOFT_PAREN, R_TRI_PAREN, R_SQ_PAREN, R_CURL_PAREN;

//types
terminal INTEGER, RATIONAL, FLOAT, DICTIONARY, SEQUENCE, SET, BOOLEAN, TOP, VOID;

//keywords
terminal ALIAS, THREAD, FUN_DEF, FUNCTION, TYPE_DEF, RETURN;

//conditionals
terminal IF, THEN, ELIF, ELSE, FI;

//loops
terminal WHILE, FORALL, DO, OD, BREAK;

//built-in functions
terminal MAIN, PRINT, READ;

//booleans
terminal TRUE, FALSE;

//math
terminal PLUS, MINUS, MULTI, DIVISION, POWER;

//logic
terminal AND, NOT, OR;

//comparison
terminal SMALLER_EQ, BIGGER_EQ, EQUAL, NOT_EQ;

//set operations
terminal SET_INTSECT, SET_DIFF, IN;

//seq operations
terminal SEQ_CONCAT;

terminal IDENTIFIER, INTEGER_LITERAL, RATIONAL_LITERAL, FLOAT_LITERAL, STRING_LITERAL, CHAR_LITERAL;

//TOP LEVEL
non terminal expr, statement, compound_stmnt;

non terminal main;

//LIST
non terminal expr_list, type_list, stmnt_list, expr_list_helper, lambda_list_helper, var_list_helper, dict_element_list_helper, stmnt_list_helper, type_list_helper;

non terminal function_call, var_assignment;

non terminal elif, return, break;

non terminal tdef, var_list, binary_operator, type;

non terminal seq_assignment, seq_literal, seq_call, dict_assignment, dict_literal, dict_element_list, thread_assignment;

non terminal var_declaration, seq_declaration, dict_declaration, property_call;

non terminal fdef, starter, alias, lambda, lambda_list, id_list, id_list_helper;

non terminal set_assignment, set_literal, set_declaration,lambda_literal;


precedence left PLUS, MINUS, DIVISION, MULTI;
precedence left L_SOFT_PAREN, R_SOFT_PAREN;
precedence left L_TRI_PAREN, R_TRI_PAREN;
precedence left L_SQ_PAREN, R_SQ_PAREN;
precedence left L_CURL_PAREN, R_CURL_PAREN;
precedence right POWER;
precedence left ELSE;
precedence left ELIF;
precedence left BIGGER_EQ, EQUAL, SMALLER_EQ, NOT_EQ, AND, OR, DOT, IN;
precedence left SEQ_CONCAT, SET_INTSECT, PIPE, SET_DIFF, ARROW, COLON, FUNCTION;

start with starter;


starter ::= tdef SEMI starter
 | fdef SEMI starter
 | var_assignment SEMI starter
 | dict_assignment SEMI starter
 | seq_assignment SEMI starter
 | var_declaration SEMI starter
 | seq_declaration SEMI starter
 | set_assignment SEMI starter
 | set_declaration SEMI starter
 | dict_declaration SEMI starter
 | thread_assignment SEMI starter
 | alias SEMI starter
 | lambda SEMI starter
 | main SEMI
 ;

statement ::= function_call SEMI
    | compound_stmnt
    | var_assignment SEMI
    | var_declaration SEMI
    | seq_assignment SEMI
    | seq_declaration SEMI
    | dict_assignment SEMI
    | dict_declaration SEMI
    | set_assignment SEMI
    | set_declaration SEMI
    | thread_assignment SEMI
    | return SEMI
    | break SEMI
    | PRINT expr SEMI
    | tdef SEMI
    | fdef SEMI
    | alias SEMI
    | lambda SEMI
    | READ IDENTIFIER SEMI
    ;

expr ::= IDENTIFIER
    | expr binary_operator expr
    | MINUS expr
    | PLUS expr
    | NOT expr
    | CHAR_LITERAL
    | STRING_LITERAL
    | FLOAT_LITERAL
    | INTEGER_LITERAL
    | RATIONAL_LITERAL
    | seq_literal
    | function_call
    | set_literal
    | expr seq_call
    | dict_literal
    | property_call
    | TRUE
    | FALSE
    | L_SOFT_PAREN expr R_SOFT_PAREN
    | L_SOFT_PAREN R_SOFT_PAREN
    | lambda
    ;

main ::= MAIN L_CURL_PAREN statement stmnt_list R_CURL_PAREN;

compound_stmnt ::= FORALL L_SOFT_PAREN expr R_SOFT_PAREN DO stmnt_list OD
    | WHILE expr DO stmnt_list OD
    | IF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list FI
    | IF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list elif
    | IF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list ELSE stmnt_list FI
    | IF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list elif ELSE stmnt_list FI
    ;



property_call ::= expr DOT expr;

 binary_operator ::= SMALLER_EQ
 | BIGGER_EQ
 | EQUAL
 | NOT_EQ
 | L_TRI_PAREN
 | R_TRI_PAREN
 | MINUS
 | MULTI
 | PLUS
 | POWER
 | DIVISION
 | OR
 | AND
 | SEQ_CONCAT
 | SET_INTSECT
 | PIPE
 | SET_DIFF
 | IN
 | COLON
 ;

 type ::= INTEGER
 | RATIONAL
 | FLOAT
 | DICTIONARY L_TRI_PAREN type type_list R_TRI_PAREN
 | SEQUENCE L_TRI_PAREN type R_TRI_PAREN
 | SET L_TRI_PAREN type R_TRI_PAREN
 | BOOLEAN
 | TOP
 | IDENTIFIER
 | VOID
 ;

 function_call ::= IDENTIFIER L_SOFT_PAREN R_SOFT_PAREN
  | IDENTIFIER L_SOFT_PAREN expr expr_list R_SOFT_PAREN
  ;

 elif ::= ELIF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list FI
  | ELIF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list elif
  ;

 return ::= RETURN expr
  | RETURN
  ;

 break ::= BREAK expr
  | BREAK
  ;

//variables

 var_assignment ::= type IDENTIFIER ASSIGN expr expr_list
  | expr ASSIGN expr expr_list
  ;

var_declaration ::= type IDENTIFIER;

fdef ::= FUN_DEF type IDENTIFIER L_SOFT_PAREN type IDENTIFIER var_list R_SOFT_PAREN L_CURL_PAREN statement stmnt_list R_CURL_PAREN
    | FUN_DEF type IDENTIFIER L_SOFT_PAREN R_SOFT_PAREN L_CURL_PAREN statement stmnt_list R_CURL_PAREN
    | FUN_DEF IDENTIFIER L_SOFT_PAREN R_SOFT_PAREN L_CURL_PAREN R_CURL_PAREN
    | FUN_DEF IDENTIFIER L_SOFT_PAREN R_SOFT_PAREN L_CURL_PAREN statement stmnt_list R_CURL_PAREN
    | FUN_DEF IDENTIFIER L_SOFT_PAREN type IDENTIFIER var_list R_SOFT_PAREN L_CURL_PAREN statement stmnt_list R_CURL_PAREN
    ;

tdef ::= TYPE_DEF IDENTIFIER L_CURL_PAREN type IDENTIFIER var_list R_CURL_PAREN
    | TYPE_DEF IDENTIFIER L_CURL_PAREN R_CURL_PAREN;

thread_assignment ::= THREAD IDENTIFIER ASSIGN L_CURL_PAREN statement stmnt_list R_CURL_PAREN
    | THREAD IDENTIFIER ASSIGN L_CURL_PAREN  R_CURL_PAREN;

//sequences

seq_assignment ::= SEQUENCE L_TRI_PAREN type R_TRI_PAREN IDENTIFIER ASSIGN expr;
seq_declaration ::= SEQUENCE L_TRI_PAREN type R_TRI_PAREN IDENTIFIER;
seq_literal ::= L_SQ_PAREN R_SQ_PAREN
    | L_SQ_PAREN expr expr_list R_SQ_PAREN
    ;

seq_call ::= L_SQ_PAREN expr R_SQ_PAREN
    | L_SQ_PAREN expr R_SQ_PAREN seq_call
    | L_SQ_PAREN expr COLON R_SQ_PAREN
    | L_SQ_PAREN expr COLON R_SQ_PAREN seq_call
    | L_SQ_PAREN COLON R_SQ_PAREN
    | L_SQ_PAREN COLON R_SQ_PAREN seq_call
    | L_SQ_PAREN COLON expr R_SQ_PAREN
    | L_SQ_PAREN COLON expr R_SQ_PAREN seq_call
    ;

set_assignment ::= SET L_TRI_PAREN type R_TRI_PAREN IDENTIFIER ASSIGN expr;
set_declaration ::= SET L_TRI_PAREN type R_TRI_PAREN IDENTIFIER;
set_literal ::= L_CURL_PAREN R_CURL_PAREN
    | L_CURL_PAREN expr expr_list R_CURL_PAREN
    ;

//dictionaries
dict_assignment ::= DICTIONARY L_TRI_PAREN type COMMA type type_list R_TRI_PAREN IDENTIFIER ASSIGN expr;
dict_declaration ::= DICTIONARY L_TRI_PAREN type COMMA type type_list R_TRI_PAREN IDENTIFIER;

dict_literal ::= L_SOFT_PAREN expr COLON expr dict_element_list R_SOFT_PAREN
    ;

alias ::= ALIAS type type
 | ALIAS THREAD type
 ;

lambda ::= FUNCTION IDENTIFIER ASSIGN lambda_literal
 //| FUNCTION IDENTIFIER ASSIGN expr
 | lambda_literal
 ;
lambda_literal ::= PIPE IDENTIFIER id_list PIPE lambda_list ARROW L_CURL_PAREN statement stmnt_list R_CURL_PAREN
 | PIPE IDENTIFIER id_list PIPE lambda_list ARROW expr
 ;


//LISTS
type_list_helper ::= type type_list;
type_list ::= COMMA type_list_helper
    |
    ;

stmnt_list_helper ::= statement stmnt_list;
stmnt_list ::= stmnt_list_helper
    |
    ;

dict_element_list_helper ::= expr COLON expr dict_element_list;
dict_element_list ::= COMMA dict_element_list_helper
    |
    ;

var_list_helper ::= type IDENTIFIER var_list;
var_list ::= COMMA var_list_helper
    |
    ;

expr_list_helper ::= expr expr_list;
expr_list ::= COMMA expr_list_helper
    |
    ;

id_list_helper ::= IDENTIFIER id_list;
id_list ::= COMMA id_list_helper
    |
    ;

lambda_list_helper ::= PIPE IDENTIFIER id_list PIPE ARROW lambda_list;
lambda_list ::= lambda_list_helper
    |
    ;