
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\005\007\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\005\000\002\002\003\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\004\013" +
    "\000\002\004\007\000\002\004\011\000\002\004\011\000" +
    "\002\004\013\000\002\004\014\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\012\003\000\002\012\005\000\002\007" +
    "\004\000\002\007\004\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\010" +
    "\003\000\002\010\005\000\002\011\003\000\002\011\004" +
    "\000\002\013\006\000\002\013\007\000\002\015\011\000" +
    "\002\015\011\000\002\016\004\000\002\016\003\000\002" +
    "\017\004\000\002\017\003\000\002\035\014\000\002\014" +
    "\006\000\002\014\005\000\002\020\007\000\002\021\004" +
    "\000\002\021\006\000\002\026\011\000\002\026\010\000" +
    "\002\027\005\000\002\027\006\000\002\030\005\000\002" +
    "\031\011\000\002\031\011\000\002\032\005\000\002\033" +
    "\005\000\002\033\007\000\002\034\010\000\002\023\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\004\052\005\001\002\000\004\002\255\001" +
    "\002\000\004\013\006\001\002\000\046\011\016\020\040" +
    "\021\041\022\026\023\031\024\007\025\032\026\025\027" +
    "\034\030\042\031\027\037\020\040\023\045\017\046\012" +
    "\051\033\053\035\101\021\001\002\000\006\011\245\101" +
    "\uffd2\001\002\000\004\005\244\001\002\000\004\005\243" +
    "\001\002\000\004\010\233\001\002\000\004\005\232\001" +
    "\002\000\060\011\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\037\uffc9\040\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\050\uffc9\051\uffc9\053\uffc9\101\uffc9\001\002\000" +
    "\004\101\227\001\002\000\030\020\040\021\041\022\026" +
    "\023\126\024\122\025\032\026\025\027\034\030\042\031" +
    "\027\101\125\001\002\000\020\012\045\101\054\102\061" +
    "\103\060\104\053\105\051\106\055\001\002\000\026\005" +
    "\uffc2\010\050\012\045\054\044\101\054\102\061\103\060" +
    "\104\053\105\051\106\055\001\002\000\010\004\213\010" +
    "\075\101\uffce\001\002\000\004\005\212\001\002\000\004" +
    "\010\154\001\002\000\050\011\016\017\152\020\040\021" +
    "\041\022\026\023\031\024\007\025\032\026\025\027\034" +
    "\030\042\031\027\037\020\040\023\045\017\046\012\051" +
    "\033\053\035\101\021\001\002\000\010\006\uffd0\015\uffd0" +
    "\101\uffd0\001\002\000\010\006\uffd4\015\uffd4\101\uffd4\001" +
    "\002\000\010\006\uffcc\015\uffcc\101\uffcc\001\002\000\004" +
    "\005\150\001\002\000\006\011\121\101\uffd3\001\002\000" +
    "\010\006\uffd1\015\uffd1\101\uffd1\001\002\000\026\005\uffc0" +
    "\010\050\012\045\054\044\101\054\102\061\103\060\104" +
    "\053\105\051\106\055\001\002\000\010\006\uffcf\015\uffcf" +
    "\101\uffcf\001\002\000\024\010\050\012\045\054\044\101" +
    "\054\102\061\103\060\104\053\105\051\106\055\001\002" +
    "\000\004\005\043\001\002\000\060\011\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe" +
    "\027\ufffe\030\ufffe\031\ufffe\037\ufffe\040\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\045\ufffe\046\ufffe\050\ufffe\051\ufffe\053\ufffe" +
    "\101\ufffe\001\002\000\010\006\uffd6\015\uffd6\101\uffd6\001" +
    "\002\000\010\006\uffd5\015\uffd5\101\uffd5\001\002\000\010" +
    "\006\uffcd\015\uffcd\101\uffcd\001\002\000\060\011\ufffa\017" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\031\ufffa\037\ufffa\040\ufffa\042" +
    "\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\050\ufffa\051\ufffa" +
    "\053\ufffa\101\ufffa\001\002\000\004\005\117\001\002\000" +
    "\026\006\077\010\050\012\045\054\044\101\054\102\061" +
    "\103\060\104\053\105\051\106\055\001\002\000\022\005" +
    "\ufff7\014\ufff7\016\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\001\002\000\044\005\uffe1\006\uffe1\007\uffe1\011" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\047\uffe1\057\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\067\uffe1\070\uffe1\071\uffe1\072" +
    "\uffe1\001\002\000\024\010\050\012\045\054\044\101\054" +
    "\102\061\103\060\104\053\105\051\106\055\001\002\000" +
    "\044\005\uffe8\006\uffe8\007\uffe8\011\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\047\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063" +
    "\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\001\002\000\044" +
    "\005\uffe2\006\uffe2\007\uffe2\011\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\047\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2" +
    "\067\uffe2\070\uffe2\071\uffe2\072\uffe2\001\002\000\044\005" +
    "\uffe7\006\uffe7\007\uffe7\011\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\047\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\067" +
    "\uffe7\070\uffe7\071\uffe7\072\uffe7\001\002\000\046\005\uffe3" +
    "\006\uffe3\007\uffe3\010\075\011\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\047\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\067\uffe3\070\uffe3\071\uffe3\072\uffe3\001\002\000\044\005" +
    "\uffe9\006\uffe9\007\uffe9\011\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\047\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\067" +
    "\uffe9\070\uffe9\071\uffe9\072\uffe9\001\002\000\016\005\064" +
    "\057\062\060\066\061\067\062\065\063\063\001\002\000" +
    "\044\005\uffe4\006\uffe4\007\uffe4\011\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\047\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063" +
    "\uffe4\067\uffe4\070\uffe4\071\uffe4\072\uffe4\001\002\000\044" +
    "\005\uffe5\006\uffe5\007\uffe5\011\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\047\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5" +
    "\067\uffe5\070\uffe5\071\uffe5\072\uffe5\001\002\000\044\005" +
    "\uffe6\006\uffe6\007\uffe6\011\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\047\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\067" +
    "\uffe6\070\uffe6\071\uffe6\072\uffe6\001\002\000\024\010\050" +
    "\012\045\054\044\101\054\102\061\103\060\104\053\105" +
    "\051\106\055\001\002\000\024\010\050\012\045\054\044" +
    "\101\054\102\061\103\060\104\053\105\051\106\055\001" +
    "\002\000\060\011\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\037\ufff8\040\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8" +
    "\046\ufff8\050\ufff8\051\ufff8\053\ufff8\101\ufff8\001\002\000" +
    "\024\010\050\012\045\054\044\101\054\102\061\103\060" +
    "\104\053\105\051\106\055\001\002\000\024\010\050\012" +
    "\045\054\044\101\054\102\061\103\060\104\053\105\051" +
    "\106\055\001\002\000\024\010\050\012\045\054\044\101" +
    "\054\102\061\103\060\104\053\105\051\106\055\001\002" +
    "\000\022\005\ufff5\014\ufff5\016\ufff5\057\ufff5\060\ufff5\061" +
    "\ufff5\062\ufff5\063\063\001\002\000\022\005\ufff4\014\ufff4" +
    "\016\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\063\001" +
    "\002\000\022\005\ufff2\014\ufff2\016\ufff2\057\ufff2\060\ufff2" +
    "\061\ufff2\062\ufff2\063\063\001\002\000\022\005\ufff3\014" +
    "\ufff3\016\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\063" +
    "\001\002\000\022\005\ufff6\014\ufff6\016\ufff6\057\ufff6\060" +
    "\ufff6\061\ufff6\062\ufff6\063\063\001\002\000\022\006\077" +
    "\012\045\101\054\102\061\103\060\104\053\105\051\106" +
    "\055\001\002\000\004\006\077\001\002\000\022\006\077" +
    "\012\045\101\054\102\061\103\060\104\053\105\051\106" +
    "\055\001\002\000\004\014\101\001\002\000\044\005\uffc7" +
    "\006\uffc7\007\uffc7\011\uffc7\014\uffc7\015\uffc7\016\uffc7\047" +
    "\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\067\uffc7" +
    "\070\uffc7\071\uffc7\072\uffc7\001\002\000\006\014\uffd8\016" +
    "\uffd8\001\002\000\006\014\uffd7\016\uffd7\001\002\000\004" +
    "\014\105\001\002\000\044\005\uffc6\006\uffc6\007\uffc6\011" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\047\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\062\uffc6\063\uffc6\067\uffc6\070\uffc6\071\uffc6\072" +
    "\uffc6\001\002\000\016\014\107\057\062\060\066\061\067" +
    "\062\065\063\063\001\002\000\022\005\ufff1\014\ufff1\016" +
    "\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\001\002" +
    "\000\020\006\077\016\ufff7\057\ufff7\060\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\001\002\000\016\016\114\057\062\060\066" +
    "\061\067\062\065\063\063\001\002\000\004\016\113\001" +
    "\002\000\044\005\uffb7\006\uffb7\007\uffb7\011\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\047\uffb7\057\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\001\002" +
    "\000\044\005\uffae\006\uffae\007\uffae\011\uffae\014\uffae\015" +
    "\uffae\016\uffae\047\uffae\057\uffae\060\uffae\061\uffae\062\uffae" +
    "\063\uffae\067\uffae\070\uffae\071\uffae\072\uffae\001\002\000" +
    "\004\016\116\001\002\000\044\005\uffb6\006\uffb6\007\uffb6" +
    "\011\uffb6\014\uffb6\015\uffb6\016\uffb6\047\uffb6\057\uffb6\060" +
    "\uffb6\061\uffb6\062\uffb6\063\uffb6\067\uffb6\070\uffb6\071\uffb6" +
    "\072\uffb6\001\002\000\022\005\ufff0\014\ufff0\016\ufff0\057" +
    "\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\001\002\000\016" +
    "\005\uffc1\057\062\060\066\061\067\062\065\063\063\001" +
    "\002\000\030\020\040\021\041\022\026\023\126\024\122" +
    "\025\032\026\025\027\034\030\042\031\027\101\125\001" +
    "\002\000\006\006\uffd2\015\uffd2\001\002\000\006\006\127" +
    "\015\130\001\002\000\006\006\uffcb\015\uffcb\001\002\000" +
    "\006\006\uffce\015\uffce\001\002\000\006\006\uffd3\015\uffd3" +
    "\001\002\000\030\020\040\021\041\022\026\023\126\024" +
    "\122\025\032\026\025\027\034\030\042\031\027\101\125" +
    "\001\002\000\004\101\131\001\002\000\004\004\132\001" +
    "\002\000\024\010\133\012\045\054\044\101\054\102\061" +
    "\103\060\104\053\105\051\106\055\001\002\000\024\010" +
    "\050\012\045\054\044\101\054\102\061\103\060\104\053" +
    "\105\051\106\055\001\002\000\004\005\uffb4\001\002\000" +
    "\016\005\uffb3\057\062\060\066\061\067\062\065\063\063" +
    "\001\002\000\020\007\145\014\ufff7\057\ufff7\060\ufff7\061" +
    "\ufff7\062\ufff7\063\ufff7\001\002\000\006\006\140\014\141" +
    "\001\002\000\020\012\045\101\054\102\061\103\060\104" +
    "\053\105\051\106\055\001\002\000\004\005\uffb2\001\002" +
    "\000\004\007\143\001\002\000\020\012\045\101\054\102" +
    "\061\103\060\104\053\105\051\106\055\001\002\000\006" +
    "\006\uffb0\014\uffb0\001\002\000\020\012\045\101\054\102" +
    "\061\103\060\104\053\105\051\106\055\001\002\000\006" +
    "\006\uffb1\014\uffb1\001\002\000\006\006\uffca\015\uffca\001" +
    "\002\000\060\011\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\037\ufffb\040\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb" +
    "\046\ufffb\050\ufffb\051\ufffb\053\ufffb\101\ufffb\001\002\000" +
    "\060\011\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\037" +
    "\uffc8\040\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\050\uffc8\051\uffc8\053\uffc8\101\uffc8\001\002\000\004\005" +
    "\153\001\002\000\004\002\000\001\002\000\020\012\045" +
    "\101\054\102\061\103\060\104\053\105\051\106\055\001" +
    "\002\000\022\011\210\014\uffda\015\205\047\uffda\067\204" +
    "\070\202\071\203\072\207\001\002\000\004\014\157\001" +
    "\002\000\004\041\160\001\002\000\046\011\016\020\040" +
    "\021\041\022\026\023\031\024\007\025\032\026\025\027" +
    "\034\030\042\031\027\037\020\040\023\045\017\046\012" +
    "\051\033\053\035\101\021\001\002\000\054\011\016\020" +
    "\040\021\041\022\026\023\031\024\007\025\032\026\025" +
    "\027\034\030\042\031\027\037\020\040\023\042\165\043" +
    "\162\044\163\045\017\046\012\051\033\053\035\101\021" +
    "\001\002\000\046\011\016\020\040\021\041\022\026\023" +
    "\031\024\007\025\032\026\025\027\034\030\042\031\027" +
    "\037\020\040\023\045\017\046\012\051\033\053\035\101" +
    "\021\001\002\000\060\011\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030" +
    "\uffed\031\uffed\037\uffed\040\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\050\uffed\051\uffed\053\uffed\101\uffed\001" +
    "\002\000\060\011\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\037\uffec\040\uffec\042\uffec\043\175\044\uffec\045\uffec" +
    "\046\uffec\050\uffec\051\uffec\053\uffec\101\uffec\001\002\000" +
    "\004\010\166\001\002\000\020\012\045\101\054\102\061" +
    "\103\060\104\053\105\051\106\055\001\002\000\004\014" +
    "\170\001\002\000\004\041\171\001\002\000\046\011\016" +
    "\020\040\021\041\022\026\023\031\024\007\025\032\026" +
    "\025\027\034\030\042\031\027\037\020\040\023\045\017" +
    "\046\012\051\033\053\035\101\021\001\002\000\052\011" +
    "\016\020\040\021\041\022\026\023\031\024\007\025\032" +
    "\026\025\027\034\030\042\031\027\037\020\040\023\042" +
    "\165\044\173\045\017\046\012\051\033\053\035\101\021" +
    "\001\002\000\060\011\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\037\uffc5\040\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\050\uffc5\051\uffc5\053\uffc5\101\uffc5\001\002" +
    "\000\060\011\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\037\uffc4\040\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\050\uffc4\051\uffc4\053\uffc4\101\uffc4\001\002\000\046" +
    "\011\016\020\040\021\041\022\026\023\031\024\007\025" +
    "\032\026\025\027\034\030\042\031\027\037\020\040\023" +
    "\045\017\046\012\051\033\053\035\101\021\001\002\000" +
    "\050\011\016\020\040\021\041\022\026\023\031\024\007" +
    "\025\032\026\025\027\034\030\042\031\027\037\020\040" +
    "\023\044\177\045\017\046\012\051\033\053\035\101\021" +
    "\001\002\000\060\011\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\037\uffea\040\uffea\042\uffea\043\uffea\044\uffea\045" +
    "\uffea\046\uffea\050\uffea\051\uffea\053\uffea\101\uffea\001\002" +
    "\000\050\011\016\020\040\021\041\022\026\023\031\024" +
    "\007\025\032\026\025\027\034\030\042\031\027\037\020" +
    "\040\023\044\201\045\017\046\012\051\033\053\035\101" +
    "\021\001\002\000\060\011\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb" +
    "\045\uffeb\046\uffeb\050\uffeb\051\uffeb\053\uffeb\101\uffeb\001" +
    "\002\000\020\012\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf" +
    "\105\uffdf\106\uffdf\001\002\000\020\012\uffde\101\uffde\102" +
    "\uffde\103\uffde\104\uffde\105\uffde\106\uffde\001\002\000\020" +
    "\012\uffe0\101\uffe0\102\uffe0\103\uffe0\104\uffe0\105\uffe0\106" +
    "\uffe0\001\002\000\020\012\uffdb\101\uffdb\102\uffdb\103\uffdb" +
    "\104\uffdb\105\uffdb\106\uffdb\001\002\000\020\012\045\101" +
    "\054\102\061\103\060\104\053\105\051\106\055\001\002" +
    "\000\020\012\uffdd\101\uffdd\102\uffdd\103\uffdd\104\uffdd\105" +
    "\uffdd\106\uffdd\001\002\000\020\012\uffdc\101\uffdc\102\uffdc" +
    "\103\uffdc\104\uffdc\105\uffdc\106\uffdc\001\002\000\006\014" +
    "\uffd9\047\uffd9\001\002\000\060\011\uffff\017\uffff\020\uffff" +
    "\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff\027" +
    "\uffff\030\uffff\031\uffff\037\uffff\040\uffff\042\uffff\043\uffff" +
    "\044\uffff\045\uffff\046\uffff\050\uffff\051\uffff\053\uffff\101" +
    "\uffff\001\002\000\024\010\050\012\045\054\044\101\054" +
    "\102\061\103\060\104\053\105\051\106\055\001\002\000" +
    "\016\005\uffbd\057\062\060\066\061\067\062\065\063\063" +
    "\001\002\000\016\005\uffc3\057\062\060\066\061\067\062" +
    "\065\063\063\001\002\000\004\047\217\001\002\000\046" +
    "\011\016\020\040\021\041\022\026\023\031\024\007\025" +
    "\032\026\025\027\034\030\042\031\027\037\020\040\023" +
    "\045\017\046\012\051\033\053\035\101\021\001\002\000" +
    "\050\011\016\020\040\021\041\022\026\023\031\024\007" +
    "\025\032\026\025\027\034\030\042\031\027\037\020\040" +
    "\023\045\017\046\012\050\221\051\033\053\035\101\021" +
    "\001\002\000\060\011\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee" +
    "\031\uffee\037\uffee\040\uffee\042\uffee\043\uffee\044\uffee\045" +
    "\uffee\046\uffee\050\uffee\051\uffee\053\uffee\101\uffee\001\002" +
    "\000\004\015\223\001\002\000\004\101\224\001\002\000" +
    "\004\004\225\001\002\000\024\010\050\012\045\054\044" +
    "\101\054\102\061\103\060\104\053\105\051\106\055\001" +
    "\002\000\016\005\uffb8\057\062\060\066\061\067\062\065" +
    "\063\063\001\002\000\004\004\230\001\002\000\020\012" +
    "\045\101\054\102\061\103\060\104\053\105\051\106\055" +
    "\001\002\000\004\005\uffbe\001\002\000\060\011\ufffc\017" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc" +
    "\026\ufffc\027\ufffc\030\ufffc\031\ufffc\037\ufffc\040\ufffc\042" +
    "\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\050\ufffc\051\ufffc" +
    "\053\ufffc\101\ufffc\001\002\000\004\101\234\001\002\000" +
    "\004\076\235\001\002\000\020\012\045\101\054\102\061" +
    "\103\060\104\053\105\051\106\055\001\002\000\004\014" +
    "\237\001\002\000\004\047\240\001\002\000\046\011\016" +
    "\020\040\021\041\022\026\023\031\024\007\025\032\026" +
    "\025\027\034\030\042\031\027\037\020\040\023\045\017" +
    "\046\012\051\033\053\035\101\021\001\002\000\050\011" +
    "\016\020\040\021\041\022\026\023\031\024\007\025\032" +
    "\026\025\027\034\030\042\031\027\037\020\040\023\045" +
    "\017\046\012\050\242\051\033\053\035\101\021\001\002" +
    "\000\060\011\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\037\uffef\040\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\050\uffef\051\uffef\053\uffef\101\uffef\001\002\000\060" +
    "\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\037\ufff9" +
    "\040\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\050" +
    "\ufff9\051\ufff9\053\ufff9\101\ufff9\001\002\000\060\011\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025" +
    "\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\037\ufffd\040\ufffd" +
    "\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\050\ufffd\051" +
    "\ufffd\053\ufffd\101\ufffd\001\002\000\030\020\040\021\041" +
    "\022\026\023\126\024\122\025\032\026\025\027\034\030" +
    "\042\031\027\101\125\001\002\000\004\015\247\001\002" +
    "\000\004\101\250\001\002\000\004\004\251\001\002\000" +
    "\004\012\253\001\002\000\004\005\uffb9\001\002\000\022" +
    "\006\077\012\045\101\054\102\061\103\060\104\053\105" +
    "\051\106\055\001\002\000\004\006\077\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\004\005\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\013\004\036\011\023\013\021" +
    "\014\007\016\035\017\010\025\014\026\012\031\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\221\001\001\000\014\006\154" +
    "\012\215\013\051\023\046\027\056\001\001\000\014\002" +
    "\214\006\045\013\051\023\046\027\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\150\004\036\013\021\014\007\016\035\017\010\025\014" +
    "\026\012\031\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\117\006\045\013\051\023" +
    "\046\027\056\001\001\000\002\001\001\000\014\002\055" +
    "\006\045\013\051\023\046\027\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\002\110\006\107\007\111\013\051\023\046\027\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\105\006\045\013\051\023\046\027\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\073\006" +
    "\045\013\051\023\046\027\056\001\001\000\014\002\072" +
    "\006\045\013\051\023\046\027\056\001\001\000\002\001" +
    "\001\000\014\002\071\006\045\013\051\023\046\027\056" +
    "\001\001\000\014\002\070\006\045\013\051\023\046\027" +
    "\056\001\001\000\014\002\067\006\045\013\051\023\046" +
    "\027\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\075\007\077\013\051\023\046\027\056\001\001\000" +
    "\004\007\103\001\001\000\014\006\101\007\102\013\051" +
    "\023\046\027\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\122\025\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\134\006\045\013\051\023\046\027\056" +
    "\032\133\001\001\000\016\002\105\006\135\013\051\023" +
    "\046\027\056\033\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\141\013\051\023\046\027\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\143\013\051\023\046\027" +
    "\056\001\001\000\002\001\001\000\012\006\145\013\051" +
    "\023\046\027\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\154\012\155\013\051\023" +
    "\046\027\056\001\001\000\004\024\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\013\004\036\011" +
    "\160\013\021\014\007\016\035\017\010\025\014\026\012" +
    "\031\027\001\001\000\026\003\150\004\036\013\021\014" +
    "\007\015\163\016\035\017\010\025\014\026\012\031\027" +
    "\001\001\000\026\003\013\004\036\011\177\013\021\014" +
    "\007\016\035\017\010\025\014\026\012\031\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\154\012\166\013\051\023\046\027\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\013\004" +
    "\036\011\171\013\021\014\007\016\035\017\010\025\014" +
    "\026\012\031\027\001\001\000\026\003\150\004\036\013" +
    "\021\014\007\015\173\016\035\017\010\025\014\026\012" +
    "\031\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\013\004\036\011\175\013\021\014\007\016\035" +
    "\017\010\025\014\026\012\031\027\001\001\000\024\003" +
    "\150\004\036\013\021\014\007\016\035\017\010\025\014" +
    "\026\012\031\027\001\001\000\002\001\001\000\024\003" +
    "\150\004\036\013\021\014\007\016\035\017\010\025\014" +
    "\026\012\031\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\210\013\051\023\046\027\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\213\006\045\013\051\023\046\027" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\013\004\036\011\217\013\021\014" +
    "\007\016\035\017\010\025\014\026\012\031\027\001\001" +
    "\000\024\003\150\004\036\013\021\014\007\016\035\017" +
    "\010\025\014\026\012\031\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\225\006\045\013\051\023\046\027\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\230\013" +
    "\051\023\046\027\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\235\013\051\023\046\027\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\013\004\036\011\240\013" +
    "\021\014\007\016\035\017\010\025\014\026\012\031\027" +
    "\001\001\000\024\003\150\004\036\013\021\014\007\016" +
    "\035\017\010\025\014\026\012\031\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\251\001\001\000\002\001\001\000" +
    "\014\006\253\007\111\013\051\023\046\027\056\001\001" +
    "\000\004\007\114\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors;

  public void syntax_error(Symbol current_token) {
    //syntaxErrors = true;
    report_error( "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right + "\n", null);
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= MAIN L_CURL_PAREN stmnt_list R_CURL_PAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement ::= function_call SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= compound_stmnt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= var_assignment SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= seq_assignment SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= dict_assignment SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= return SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= break SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= PRINT expr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr MULTI expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr POWER expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr DIVISION expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= L_SOFT_PAREN expr R_SOFT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= READ SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // compound_stmnt ::= FORALL L_SOFT_PAREN IDENTIFIER IN id R_SOFT_PAREN DO stmnt_list OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmnt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // compound_stmnt ::= WHILE logic_expr DO stmnt_list OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmnt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // compound_stmnt ::= IF L_SOFT_PAREN logic_expr R_SOFT_PAREN THEN stmnt_list FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmnt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // compound_stmnt ::= IF L_SOFT_PAREN logic_expr R_SOFT_PAREN THEN stmnt_list elif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmnt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // compound_stmnt ::= IF L_SOFT_PAREN logic_expr R_SOFT_PAREN THEN stmnt_list ELSE stmnt_list FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmnt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // compound_stmnt ::= IF L_SOFT_PAREN logic_expr R_SOFT_PAREN THEN stmnt_list elif ELSE stmnt_list FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmnt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // id ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // id ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // id ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // id ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // id ::= RATIONAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // id ::= seq_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // id ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // id ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // id ::= array_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comp_operator ::= SMALLER_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_operator",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comp_operator ::= BIGGER_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_operator",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comp_operator ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_operator",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comp_operator ::= NOT_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_operator",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comp_operator ::= L_TRI_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_operator",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comp_operator ::= R_TRI_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_operator",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // logic_expr ::= id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // logic_expr ::= id comp_operator id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // id_list ::= COMMA id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // id_list ::= COMMA id_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= DICTIONARY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type ::= SEQUENCE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type ::= SET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= STRING_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type_list ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type_list ::= type_list COMMA type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmnt_list ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmnt_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmnt_list ::= stmnt_list statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmnt_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // function_call ::= IDENTIFIER L_SOFT_PAREN id_list R_SOFT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // function_call ::= IDENTIFIER L_SOFT_PAREN id id_list R_SOFT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // elif ::= ELIF L_SOFT_PAREN logic_expr R_SOFT_PAREN THEN stmnt_list FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // elif ::= ELIF L_SOFT_PAREN logic_expr R_SOFT_PAREN THEN stmnt_list elif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // return ::= RETURN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // return ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // break ::= BREAK expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // break ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // fdef ::= FUN_DEF type IDENTIFIER L_SOFT_PAREN var_list R_SOFT_PAREN L_CURL_PAREN stmnt_list R_CURL_PAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // var_assignment ::= type IDENTIFIER ASSIGN id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_assignment",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // var_assignment ::= IDENTIFIER ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_assignment",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tdef ::= TYPE_DEF IDENTIFIER L_CURL_PAREN var_list R_CURL_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tdef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // var_list ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // var_list ::= var_list COMMA type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // seq_assignment ::= SEQUENCE L_TRI_PAREN type R_TRI_PAREN IDENTIFIER ASSIGN seq_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_assignment",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // seq_assignment ::= L_TRI_PAREN type R_TRI_PAREN IDENTIFIER ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_assignment",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // seq_literal ::= L_SQ_PAREN id_list R_SQ_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // seq_literal ::= L_SQ_PAREN id id_list R_SQ_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // seq_call ::= L_SQ_PAREN id R_SQ_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_call",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // dict_assignment ::= DICTIONARY L_TRI_PAREN type_list R_TRI_PAREN IDENTIFIER ASSIGN dict_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_assignment",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dict_assignment ::= DICTIONARY L_TRI_PAREN type_list R_TRI_PAREN IDENTIFIER ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_assignment",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // dict_literal ::= L_SOFT_PAREN dict_element_list R_SOFT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_literal",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // dict_element_list ::= id COLON id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element_list",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // dict_element_list ::= dict_element_list COMMA id COLON id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element_list",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // thread_assignment ::= THREAD id ASSIGN L_CURL_PAREN stmnt_list R_CURL_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("thread_assignment",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // array_call ::= L_SQ_PAREN expr R_SQ_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_call",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
