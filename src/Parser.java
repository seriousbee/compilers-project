
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\003\000\002\005\007\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\005\000\002\003\004\000\002" +
    "\003\004\000\002\002\003\000\002\002\005\000\002\002" +
    "\004\000\002\002\005\000\002\002\004\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\004\013\000\002\004\007\000\002\004" +
    "\011\000\002\004\011\000\002\004\013\000\002\004\014" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\021\003\000\002\021\003\000\002\006\004\000" +
    "\002\006\004\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\007\003\000" +
    "\002\007\005\000\002\010\003\000\002\010\004\000\002" +
    "\011\006\000\002\011\007\000\002\013\011\000\002\013" +
    "\011\000\002\014\004\000\002\014\003\000\002\015\004" +
    "\000\002\015\003\000\002\035\014\000\002\012\006\000" +
    "\002\012\005\000\002\032\004\000\002\016\007\000\002" +
    "\017\004\000\002\017\006\000\002\023\011\000\002\033" +
    "\007\000\002\024\006\000\002\025\005\000\002\026\011" +
    "\000\002\026\011\000\002\034\007\000\002\027\005\000" +
    "\002\030\005\000\002\030\007\000\002\031\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\040\020\033\021\036\022\015\023\020\024" +
    "\004\025\021\026\014\027\023\030\035\031\016\033\024" +
    "\034\007\036\025\052\022\101\011\001\002\000\006\011" +
    "\336\101\uffbf\001\002\000\004\005\334\001\002\000\004" +
    "\005\332\001\002\000\030\020\033\021\036\022\015\023" +
    "\060\024\054\025\021\026\014\027\023\030\035\031\016" +
    "\101\056\001\002\000\004\101\316\001\002\000\006\004" +
    "\120\101\uffbb\001\002\000\004\002\ufff7\001\002\000\004" +
    "\005\314\001\002\000\010\006\uffbd\015\uffbd\101\uffbd\001" +
    "\002\000\010\006\uffc1\015\uffc1\101\uffc1\001\002\000\010" +
    "\006\uffb9\015\uffb9\101\uffb9\001\002\000\004\005\312\001" +
    "\002\000\006\011\266\101\uffc0\001\002\000\010\006\uffbe" +
    "\015\uffbe\101\uffbe\001\002\000\004\013\262\001\002\000" +
    "\010\006\uffbc\015\uffbc\101\uffbc\001\002\000\004\101\066" +
    "\001\002\000\004\101\052\001\002\000\004\005\050\001" +
    "\002\000\004\005\046\001\002\000\004\005\044\001\002" +
    "\000\004\002\043\001\002\000\004\005\041\001\002\000" +
    "\010\006\uffc3\015\uffc3\101\uffc3\001\002\000\004\005\037" +
    "\001\002\000\010\006\uffba\015\uffba\101\uffba\001\002\000" +
    "\010\006\uffc2\015\uffc2\101\uffc2\001\002\000\040\020\033" +
    "\021\036\022\015\023\020\024\004\025\021\026\014\027" +
    "\023\030\035\031\016\033\024\034\007\036\025\052\022" +
    "\101\011\001\002\000\004\002\ufff9\001\002\000\040\020" +
    "\033\021\036\022\015\023\020\024\004\025\021\026\014" +
    "\027\023\030\035\031\016\033\024\034\007\036\025\052" +
    "\022\101\011\001\002\000\004\002\000\001\002\000\004" +
    "\002\001\001\002\000\040\020\033\021\036\022\015\023" +
    "\020\024\004\025\021\026\014\027\023\030\035\031\016" +
    "\033\024\034\007\036\025\052\022\101\011\001\002\000" +
    "\004\002\ufff8\001\002\000\040\020\033\021\036\022\015" +
    "\023\020\024\004\025\021\026\014\027\023\030\035\031" +
    "\016\033\024\034\007\036\025\052\022\101\011\001\002" +
    "\000\004\002\uffff\001\002\000\040\020\033\021\036\022" +
    "\015\023\020\024\004\025\021\026\014\027\023\030\035" +
    "\031\016\033\024\034\007\036\025\052\022\101\011\001" +
    "\002\000\004\002\ufffb\001\002\000\004\013\053\001\002" +
    "\000\030\020\033\021\036\022\015\023\060\024\054\025" +
    "\021\026\014\027\023\030\035\031\016\101\056\001\002" +
    "\000\010\006\uffbf\015\uffbf\101\uffbf\001\002\000\004\101" +
    "\065\001\002\000\010\006\uffbb\015\uffbb\101\uffbb\001\002" +
    "\000\006\006\061\017\062\001\002\000\010\006\uffc0\015" +
    "\uffc0\101\uffc0\001\002\000\030\020\033\021\036\022\015" +
    "\023\060\024\054\025\021\026\014\027\023\030\035\031" +
    "\016\101\056\001\002\000\004\005\uffa8\001\002\000\004" +
    "\101\064\001\002\000\010\006\uffa6\014\uffa6\017\uffa6\001" +
    "\002\000\010\006\uffa7\014\uffa7\017\uffa7\001\002\000\004" +
    "\004\067\001\002\000\004\013\070\001\002\000\052\020" +
    "\033\021\036\022\015\023\020\024\004\025\021\026\014" +
    "\027\023\030\035\031\016\033\024\034\007\036\025\037" +
    "\103\040\100\045\107\046\072\051\106\053\115\101\116" +
    "\001\002\000\004\005\261\001\002\000\004\010\251\001" +
    "\002\000\004\005\250\001\002\000\004\005\247\001\002" +
    "\000\004\005\246\001\002\000\054\017\245\020\033\021" +
    "\036\022\015\023\020\024\004\025\021\026\014\027\023" +
    "\030\035\031\016\033\024\034\007\036\025\037\103\040" +
    "\100\045\107\046\072\051\106\053\115\101\116\001\002" +
    "\000\004\005\244\001\002\000\004\010\217\001\002\000" +
    "\064\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\034" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\046\uffb6\050\uffb6\051\uffb6\053\uffb6\101\uffb6\001" +
    "\002\000\004\005\216\001\002\000\032\005\uffaf\010\125" +
    "\012\123\054\122\060\121\065\134\101\132\102\140\103" +
    "\137\104\131\105\126\106\133\001\002\000\004\005\214" +
    "\001\002\000\004\005\213\001\002\000\032\005\uffad\010" +
    "\125\012\123\054\122\060\121\065\134\101\132\102\140" +
    "\103\137\104\131\105\126\106\133\001\002\000\030\010" +
    "\125\012\123\054\122\060\121\065\134\101\132\102\140" +
    "\103\137\104\131\105\126\106\133\001\002\000\004\005" +
    "\204\001\002\000\064\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031" +
    "\ufff4\033\ufff4\034\ufff4\036\ufff4\037\ufff4\040\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\045\ufff4\046\ufff4\050\ufff4\051\ufff4\053" +
    "\ufff4\101\ufff4\001\002\000\004\005\203\001\002\000\004" +
    "\005\202\001\002\000\004\005\201\001\002\000\030\010" +
    "\125\012\123\054\122\060\121\065\134\101\132\102\140" +
    "\103\137\104\131\105\126\106\133\001\002\000\010\004" +
    "\120\010\117\101\uffbb\001\002\000\030\010\125\012\123" +
    "\054\122\060\121\065\134\101\132\102\140\103\137\104" +
    "\131\105\126\106\133\001\002\000\030\010\125\012\123" +
    "\054\122\060\121\065\134\101\132\102\140\103\137\104" +
    "\131\105\126\106\133\001\002\000\030\010\uffc6\012\uffc6" +
    "\054\uffc6\060\uffc6\065\uffc6\101\uffc6\102\uffc6\103\uffc6\104" +
    "\uffc6\105\uffc6\106\uffc6\001\002\000\004\005\172\001\002" +
    "\000\030\010\125\012\123\054\122\060\121\065\134\101" +
    "\132\102\140\103\137\104\131\105\126\106\133\001\002" +
    "\000\030\010\125\012\123\054\122\060\121\065\134\101" +
    "\132\102\140\103\137\104\131\105\126\106\133\001\002" +
    "\000\030\010\125\012\123\054\122\060\121\065\134\101" +
    "\132\102\140\103\137\104\131\105\126\106\133\001\002" +
    "\000\050\005\uffe1\006\uffe1\007\uffe1\011\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\047\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1\072" +
    "\uffe1\001\002\000\050\005\uffdc\006\uffdc\007\uffdc\011\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\047\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\066\uffdc\067\uffdc\070\uffdc" +
    "\071\uffdc\072\uffdc\001\002\000\050\005\uffdb\006\uffdb\007" +
    "\uffdb\011\uffdb\014\uffdb\015\uffdb\016\uffdb\047\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\066\uffdb\067" +
    "\uffdb\070\uffdb\071\uffdb\072\uffdb\001\002\000\050\005\uffe0" +
    "\006\uffe0\007\uffe0\011\uffe0\014\uffe0\015\uffe0\016\uffe0\047" +
    "\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0" +
    "\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\001\002\000" +
    "\052\005\uffe7\006\uffe7\007\uffe7\010\117\011\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\047\uffe7\057\uffe7\060\uffe7\061\uffe7\062" +
    "\uffe7\063\uffe7\064\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7" +
    "\072\uffe7\001\002\000\050\005\uffe2\006\uffe2\007\uffe2\011" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\047\uffe2\057\uffe2\060\uffe2" +
    "\061\uffe2\062\uffe2\063\uffe2\064\uffe2\066\uffe2\067\uffe2\070" +
    "\uffe2\071\uffe2\072\uffe2\001\002\000\030\010\uffc7\012\uffc7" +
    "\054\uffc7\060\uffc7\065\uffc7\101\uffc7\102\uffc7\103\uffc7\104" +
    "\uffc7\105\uffc7\106\uffc7\001\002\000\036\005\uffaa\011\143" +
    "\015\151\057\147\060\141\061\144\062\153\063\154\064" +
    "\142\066\156\067\155\070\150\071\146\072\145\001\002" +
    "\000\050\005\uffdd\006\uffdd\007\uffdd\011\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\047\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd" +
    "\063\uffdd\064\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072" +
    "\uffdd\001\002\000\050\005\uffde\006\uffde\007\uffde\011\uffde" +
    "\014\uffde\015\uffde\016\uffde\047\uffde\057\uffde\060\uffde\061" +
    "\uffde\062\uffde\063\uffde\064\uffde\066\uffde\067\uffde\070\uffde" +
    "\071\uffde\072\uffde\001\002\000\050\005\uffdf\006\uffdf\007" +
    "\uffdf\011\uffdf\014\uffdf\015\uffdf\016\uffdf\047\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\066\uffdf\067" +
    "\uffdf\070\uffdf\071\uffdf\072\uffdf\001\002\000\030\010\uffce" +
    "\012\uffce\054\uffce\060\uffce\065\uffce\101\uffce\102\uffce\103" +
    "\uffce\104\uffce\105\uffce\106\uffce\001\002\000\030\010\uffc8" +
    "\012\uffc8\054\uffc8\060\uffc8\065\uffc8\101\uffc8\102\uffc8\103" +
    "\uffc8\104\uffc8\105\uffc8\106\uffc8\001\002\000\030\010\uffd0" +
    "\012\uffd0\054\uffd0\060\uffd0\065\uffd0\101\uffd0\102\uffd0\103" +
    "\uffd0\104\uffd0\105\uffd0\106\uffd0\001\002\000\030\010\uffcd" +
    "\012\uffcd\054\uffcd\060\uffcd\065\uffcd\101\uffcd\102\uffcd\103" +
    "\uffcd\104\uffcd\105\uffcd\106\uffcd\001\002\000\030\010\uffd1" +
    "\012\uffd1\054\uffd1\060\uffd1\065\uffd1\101\uffd1\102\uffd1\103" +
    "\uffd1\104\uffd1\105\uffd1\106\uffd1\001\002\000\030\010\uffd2" +
    "\012\uffd2\054\uffd2\060\uffd2\065\uffd2\101\uffd2\102\uffd2\103" +
    "\uffd2\104\uffd2\105\uffd2\106\uffd2\001\002\000\030\010\uffcc" +
    "\012\uffcc\054\uffcc\060\uffcc\065\uffcc\101\uffcc\102\uffcc\103" +
    "\uffcc\104\uffcc\105\uffcc\106\uffcc\001\002\000\030\010\uffd3" +
    "\012\uffd3\054\uffd3\060\uffd3\065\uffd3\101\uffd3\102\uffd3\103" +
    "\uffd3\104\uffd3\105\uffd3\106\uffd3\001\002\000\030\010\uffcf" +
    "\012\uffcf\054\uffcf\060\uffcf\065\uffcf\101\uffcf\102\uffcf\103" +
    "\uffcf\104\uffcf\105\uffcf\106\uffcf\001\002\000\030\010\125" +
    "\012\123\054\122\060\121\065\134\101\132\102\140\103" +
    "\137\104\131\105\126\106\133\001\002\000\030\010\uffca" +
    "\012\uffca\054\uffca\060\uffca\065\uffca\101\uffca\102\uffca\103" +
    "\uffca\104\uffca\105\uffca\106\uffca\001\002\000\030\010\uffcb" +
    "\012\uffcb\054\uffcb\060\uffcb\065\uffcb\101\uffcb\102\uffcb\103" +
    "\uffcb\104\uffcb\105\uffcb\106\uffcb\001\002\000\030\010\uffd4" +
    "\012\uffd4\054\uffd4\060\uffd4\065\uffd4\101\uffd4\102\uffd4\103" +
    "\uffd4\104\uffd4\105\uffd4\106\uffd4\001\002\000\030\010\uffc9" +
    "\012\uffc9\054\uffc9\060\uffc9\065\uffc9\101\uffc9\102\uffc9\103" +
    "\uffc9\104\uffc9\105\uffc9\106\uffc9\001\002\000\050\005\uffe6" +
    "\006\uffe6\007\uffe6\011\143\014\uffe6\015\151\016\uffe6\047" +
    "\uffe6\057\147\060\141\061\144\062\153\063\154\064\142" +
    "\066\156\067\155\070\150\071\146\072\145\001\002\000" +
    "\036\011\143\014\161\015\151\057\147\060\141\061\144" +
    "\062\153\063\154\064\142\066\156\067\155\070\150\071" +
    "\146\072\145\001\002\000\050\005\uffe4\006\uffe4\007\uffe4" +
    "\011\uffe4\014\uffe4\015\uffe4\016\uffe4\047\uffe4\057\uffe4\060" +
    "\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\066\uffe4\067\uffe4" +
    "\070\uffe4\071\uffe4\072\uffe4\001\002\000\050\005\uffe5\006" +
    "\uffe5\007\uffe5\011\143\014\uffe5\015\151\016\uffe5\047\uffe5" +
    "\057\147\060\141\061\144\062\153\063\154\064\142\066" +
    "\156\067\155\070\150\071\146\072\145\001\002\000\040" +
    "\006\166\011\143\015\151\016\165\057\147\060\141\061" +
    "\144\062\153\063\154\064\142\066\156\067\155\070\150" +
    "\071\146\072\145\001\002\000\004\016\171\001\002\000" +
    "\050\005\uffa2\006\uffa2\007\uffa2\011\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\047\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063" +
    "\uffa2\064\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2" +
    "\001\002\000\032\006\166\010\125\012\123\054\122\060" +
    "\121\065\134\101\132\102\140\103\137\104\131\105\126" +
    "\106\133\001\002\000\040\011\143\014\uffc5\015\151\016" +
    "\uffc5\057\147\060\141\061\144\062\153\063\154\064\142" +
    "\066\156\067\155\070\150\071\146\072\145\001\002\000" +
    "\006\014\uffc4\016\uffc4\001\002\000\050\005\uffa3\006\uffa3" +
    "\007\uffa3\011\uffa3\014\uffa3\015\uffa3\016\uffa3\047\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\066\uffa3" +
    "\067\uffa3\070\uffa3\071\uffa3\072\uffa3\001\002\000\050\005" +
    "\uffe3\006\uffe3\007\uffe3\011\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\047\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064" +
    "\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\001\002" +
    "\000\040\006\166\011\143\014\175\015\151\057\147\060" +
    "\141\061\144\062\153\063\154\064\142\066\156\067\155" +
    "\070\150\071\146\072\145\001\002\000\004\014\176\001" +
    "\002\000\050\005\uffb4\006\uffb4\007\uffb4\011\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\047\uffb4\057\uffb4\060\uffb4\061\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4" +
    "\072\uffb4\001\002\000\050\005\uffb3\006\uffb3\007\uffb3\011" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\047\uffb3\057\uffb3\060\uffb3" +
    "\061\uffb3\062\uffb3\063\uffb3\064\uffb3\066\uffb3\067\uffb3\070" +
    "\uffb3\071\uffb3\072\uffb3\001\002\000\036\005\200\011\143" +
    "\015\151\057\147\060\141\061\144\062\153\063\154\064" +
    "\142\066\156\067\155\070\150\071\146\072\145\001\002" +
    "\000\064\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\033\uffea" +
    "\034\uffea\036\uffea\037\uffea\040\uffea\042\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\050\uffea\051\uffea\053\uffea\101\uffea" +
    "\001\002\000\064\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\033\ufff2\034\ufff2\036\ufff2\037\ufff2\040\ufff2\042\ufff2\043" +
    "\ufff2\044\ufff2\045\ufff2\046\ufff2\050\ufff2\051\ufff2\053\ufff2" +
    "\101\ufff2\001\002\000\064\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\031\uffec\033\uffec\034\uffec\036\uffec\037\uffec\040\uffec\042" +
    "\uffec\043\uffec\044\uffec\045\uffec\046\uffec\050\uffec\051\uffec" +
    "\053\uffec\101\uffec\001\002\000\064\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\031\uffee\033\uffee\034\uffee\036\uffee\037\uffee\040" +
    "\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\050\uffee" +
    "\051\uffee\053\uffee\101\uffee\001\002\000\064\017\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\033\ufff5\034\ufff5\036\ufff5\037" +
    "\ufff5\040\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5" +
    "\050\ufff5\051\ufff5\053\ufff5\101\ufff5\001\002\000\036\011" +
    "\143\015\151\047\206\057\147\060\141\061\144\062\153" +
    "\063\154\064\142\066\156\067\155\070\150\071\146\072" +
    "\145\001\002\000\052\020\033\021\036\022\015\023\020" +
    "\024\004\025\021\026\014\027\023\030\035\031\016\033" +
    "\024\034\007\036\025\037\103\040\100\045\107\046\072" +
    "\051\106\053\115\101\116\001\002\000\054\020\033\021" +
    "\036\022\015\023\020\024\004\025\021\026\014\027\023" +
    "\030\035\031\016\033\024\034\007\036\025\037\103\040" +
    "\100\045\107\046\072\050\211\051\106\053\115\101\116" +
    "\001\002\000\064\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\033\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\050\uffb5\051\uffb5\053\uffb5" +
    "\101\uffb5\001\002\000\064\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\033\uffd9\034\uffd9\036\uffd9\037\uffd9\040\uffd9\042" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\050\uffd9\051\uffd9" +
    "\053\uffd9\101\uffd9\001\002\000\036\005\uffae\011\143\015" +
    "\151\057\147\060\141\061\144\062\153\063\154\064\142" +
    "\066\156\067\155\070\150\071\146\072\145\001\002\000" +
    "\064\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\033\uffed\034" +
    "\uffed\036\uffed\037\uffed\040\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\050\uffed\051\uffed\053\uffed\101\uffed\001" +
    "\002\000\064\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\033" +
    "\uffeb\034\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\050\uffeb\051\uffeb\053\uffeb\101" +
    "\uffeb\001\002\000\036\005\uffb0\011\143\015\151\057\147" +
    "\060\141\061\144\062\153\063\154\064\142\066\156\067" +
    "\155\070\150\071\146\072\145\001\002\000\064\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\033\uffef\034\uffef\036\uffef" +
    "\037\uffef\040\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\050\uffef\051\uffef\053\uffef\101\uffef\001\002\000\030" +
    "\010\125\012\123\054\122\060\121\065\134\101\132\102" +
    "\140\103\137\104\131\105\126\106\133\001\002\000\036" +
    "\011\143\014\221\015\151\057\147\060\141\061\144\062" +
    "\153\063\154\064\142\066\156\067\155\070\150\071\146" +
    "\072\145\001\002\000\004\041\222\001\002\000\052\020" +
    "\033\021\036\022\015\023\020\024\004\025\021\026\014" +
    "\027\023\030\035\031\016\033\024\034\007\036\025\037" +
    "\103\040\100\045\107\046\072\051\106\053\115\101\116" +
    "\001\002\000\060\020\033\021\036\022\015\023\020\024" +
    "\004\025\021\026\014\027\023\030\035\031\016\033\024" +
    "\034\007\036\025\037\103\040\100\042\227\043\226\044" +
    "\224\045\107\046\072\051\106\053\115\101\116\001\002" +
    "\000\064\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\033\uffd8" +
    "\034\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\050\uffd8\051\uffd8\053\uffd8\101\uffd8" +
    "\001\002\000\064\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\033\uffd7\034\uffd7\036\uffd7\037\uffd7\040\uffd7\042\uffd7\043" +
    "\241\044\uffd7\045\uffd7\046\uffd7\050\uffd7\051\uffd7\053\uffd7" +
    "\101\uffd7\001\002\000\052\020\033\021\036\022\015\023" +
    "\020\024\004\025\021\026\014\027\023\030\035\031\016" +
    "\033\024\034\007\036\025\037\103\040\100\045\107\046" +
    "\072\051\106\053\115\101\116\001\002\000\004\010\230" +
    "\001\002\000\030\010\125\012\123\054\122\060\121\065" +
    "\134\101\132\102\140\103\137\104\131\105\126\106\133" +
    "\001\002\000\036\011\143\014\232\015\151\057\147\060" +
    "\141\061\144\062\153\063\154\064\142\066\156\067\155" +
    "\070\150\071\146\072\145\001\002\000\004\041\233\001" +
    "\002\000\052\020\033\021\036\022\015\023\020\024\004" +
    "\025\021\026\014\027\023\030\035\031\016\033\024\034" +
    "\007\036\025\037\103\040\100\045\107\046\072\051\106" +
    "\053\115\101\116\001\002\000\056\020\033\021\036\022" +
    "\015\023\020\024\004\025\021\026\014\027\023\030\035" +
    "\031\016\033\024\034\007\036\025\037\103\040\100\042" +
    "\227\044\235\045\107\046\072\051\106\053\115\101\116" +
    "\001\002\000\064\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\033\uffb2\034\uffb2\036\uffb2\037\uffb2\040\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\050\uffb2\051\uffb2\053\uffb2" +
    "\101\uffb2\001\002\000\064\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\033\uffb1\034\uffb1\036\uffb1\037\uffb1\040\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\050\uffb1\051\uffb1" +
    "\053\uffb1\101\uffb1\001\002\000\054\020\033\021\036\022" +
    "\015\023\020\024\004\025\021\026\014\027\023\030\035" +
    "\031\016\033\024\034\007\036\025\037\103\040\100\044" +
    "\240\045\107\046\072\051\106\053\115\101\116\001\002" +
    "\000\064\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6" +
    "\034\uffd6\036\uffd6\037\uffd6\040\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\050\uffd6\051\uffd6\053\uffd6\101\uffd6" +
    "\001\002\000\052\020\033\021\036\022\015\023\020\024" +
    "\004\025\021\026\014\027\023\030\035\031\016\033\024" +
    "\034\007\036\025\037\103\040\100\045\107\046\072\051" +
    "\106\053\115\101\116\001\002\000\054\020\033\021\036" +
    "\022\015\023\020\024\004\025\021\026\014\027\023\030" +
    "\035\031\016\033\024\034\007\036\025\037\103\040\100" +
    "\044\243\045\107\046\072\051\106\053\115\101\116\001" +
    "\002\000\064\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\033" +
    "\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\050\uffd5\051\uffd5\053\uffd5\101" +
    "\uffd5\001\002\000\064\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\033\ufff1\034\ufff1\036\ufff1\037\ufff1\040\ufff1\042\ufff1" +
    "\043\ufff1\044\ufff1\045\ufff1\046\ufff1\050\ufff1\051\ufff1\053" +
    "\ufff1\101\ufff1\001\002\000\004\005\uff9b\001\002\000\064" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025" +
    "\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\033\ufff3\034\ufff3" +
    "\036\ufff3\037\ufff3\040\ufff3\042\ufff3\043\ufff3\044\ufff3\045" +
    "\ufff3\046\ufff3\050\ufff3\051\ufff3\053\ufff3\101\ufff3\001\002" +
    "\000\064\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\033\ufff0" +
    "\034\ufff0\036\ufff0\037\ufff0\040\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\045\ufff0\046\ufff0\050\ufff0\051\ufff0\053\ufff0\101\ufff0" +
    "\001\002\000\064\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\033\uffe8\034\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\050\uffe8\051\uffe8\053\uffe8" +
    "\101\uffe8\001\002\000\004\101\252\001\002\000\004\076" +
    "\253\001\002\000\030\010\125\012\123\054\122\060\121" +
    "\065\134\101\132\102\140\103\137\104\131\105\126\106" +
    "\133\001\002\000\036\011\143\014\255\015\151\057\147" +
    "\060\141\061\144\062\153\063\154\064\142\066\156\067" +
    "\155\070\150\071\146\072\145\001\002\000\004\047\256" +
    "\001\002\000\052\020\033\021\036\022\015\023\020\024" +
    "\004\025\021\026\014\027\023\030\035\031\016\033\024" +
    "\034\007\036\025\037\103\040\100\045\107\046\072\051" +
    "\106\053\115\101\116\001\002\000\054\020\033\021\036" +
    "\022\015\023\020\024\004\025\021\026\014\027\023\030" +
    "\035\031\016\033\024\034\007\036\025\037\103\040\100" +
    "\045\107\046\072\050\260\051\106\053\115\101\116\001" +
    "\002\000\064\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\033" +
    "\uffda\034\uffda\036\uffda\037\uffda\040\uffda\042\uffda\043\uffda" +
    "\044\uffda\045\uffda\046\uffda\050\uffda\051\uffda\053\uffda\101" +
    "\uffda\001\002\000\064\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\033\uffe9\034\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\046\uffe9\050\uffe9\051\uffe9\053" +
    "\uffe9\101\uffe9\001\002\000\052\020\033\021\036\022\015" +
    "\023\020\024\004\025\021\026\014\027\023\030\035\031" +
    "\016\033\024\034\007\036\025\037\103\040\100\045\107" +
    "\046\072\051\106\053\115\101\116\001\002\000\054\017" +
    "\264\020\033\021\036\022\015\023\020\024\004\025\021" +
    "\026\014\027\023\030\035\031\016\033\024\034\007\036" +
    "\025\037\103\040\100\045\107\046\072\051\106\053\115" +
    "\101\116\001\002\000\004\005\265\001\002\000\004\002" +
    "\ufff6\001\002\000\030\020\033\021\036\022\015\023\060" +
    "\024\054\025\021\026\014\027\023\030\035\031\016\101" +
    "\056\001\002\000\006\006\271\015\272\001\002\000\006" +
    "\006\uffb8\015\uffb8\001\002\000\030\020\033\021\036\022" +
    "\015\023\060\024\054\025\021\026\014\027\023\030\035" +
    "\031\016\101\056\001\002\000\004\101\273\001\002\000" +
    "\006\004\274\005\uff9f\001\002\000\030\010\275\012\123" +
    "\054\122\060\121\065\134\101\132\102\140\103\137\104" +
    "\131\105\126\106\133\001\002\000\030\010\125\012\123" +
    "\054\122\060\121\065\134\101\132\102\140\103\137\104" +
    "\131\105\126\106\133\001\002\000\004\005\uffa1\001\002" +
    "\000\036\005\uffa0\011\143\015\151\057\147\060\141\061" +
    "\144\062\153\063\154\064\142\066\156\067\155\070\150" +
    "\071\146\072\145\001\002\000\006\006\304\014\305\001" +
    "\002\000\040\007\302\011\143\014\161\015\151\057\147" +
    "\060\141\061\144\062\153\063\154\064\142\066\156\067" +
    "\155\070\150\071\146\072\145\001\002\000\030\010\125" +
    "\012\123\054\122\060\121\065\134\101\132\102\140\103" +
    "\137\104\131\105\126\106\133\001\002\000\040\006\uff9d" +
    "\011\143\014\uff9d\015\151\057\147\060\141\061\144\062" +
    "\153\063\154\064\142\066\156\067\155\070\150\071\146" +
    "\072\145\001\002\000\030\010\125\012\123\054\122\060" +
    "\121\065\134\101\132\102\140\103\137\104\131\105\126" +
    "\106\133\001\002\000\004\005\uff9e\001\002\000\036\007" +
    "\307\011\143\015\151\057\147\060\141\061\144\062\153" +
    "\063\154\064\142\066\156\067\155\070\150\071\146\072" +
    "\145\001\002\000\030\010\125\012\123\054\122\060\121" +
    "\065\134\101\132\102\140\103\137\104\131\105\126\106" +
    "\133\001\002\000\040\006\uff9c\011\143\014\uff9c\015\151" +
    "\057\147\060\141\061\144\062\153\063\154\064\142\066" +
    "\156\067\155\070\150\071\146\072\145\001\002\000\006" +
    "\006\uffb7\015\uffb7\001\002\000\040\020\033\021\036\022" +
    "\015\023\020\024\004\025\021\026\014\027\023\030\035" +
    "\031\016\033\024\034\007\036\025\052\022\101\011\001" +
    "\002\000\004\002\ufffd\001\002\000\040\020\033\021\036" +
    "\022\015\023\020\024\004\025\021\026\014\027\023\030" +
    "\035\031\016\033\024\034\007\036\025\052\022\101\011" +
    "\001\002\000\004\002\ufffa\001\002\000\006\004\317\005" +
    "\uffa9\001\002\000\030\010\125\012\123\054\122\060\121" +
    "\065\134\101\132\102\140\103\137\104\131\105\126\106" +
    "\133\001\002\000\036\005\uffab\011\143\015\151\057\147" +
    "\060\141\061\144\062\153\063\154\064\142\066\156\067" +
    "\155\070\150\071\146\072\145\001\002\000\004\101\322" +
    "\001\002\000\004\010\323\001\002\000\030\020\033\021" +
    "\036\022\015\023\060\024\054\025\021\026\014\027\023" +
    "\030\035\031\016\101\056\001\002\000\006\006\061\014" +
    "\325\001\002\000\004\013\326\001\002\000\052\020\033" +
    "\021\036\022\015\023\020\024\004\025\021\026\014\027" +
    "\023\030\035\031\016\033\024\034\007\036\025\037\103" +
    "\040\100\045\107\046\072\051\106\053\115\101\116\001" +
    "\002\000\054\017\330\020\033\021\036\022\015\023\020" +
    "\024\004\025\021\026\014\027\023\030\035\031\016\033" +
    "\024\034\007\036\025\037\103\040\100\045\107\046\072" +
    "\051\106\053\115\101\116\001\002\000\004\005\331\001" +
    "\002\000\004\005\uffac\001\002\000\040\020\033\021\036" +
    "\022\015\023\020\024\004\025\021\026\014\027\023\030" +
    "\035\031\016\033\024\034\007\036\025\052\022\101\011" +
    "\001\002\000\004\002\ufffc\001\002\000\040\020\033\021" +
    "\036\022\015\023\020\024\004\025\021\026\014\027\023" +
    "\030\035\031\016\033\024\034\007\036\025\052\022\101" +
    "\011\001\002\000\004\002\ufffe\001\002\000\030\020\033" +
    "\021\036\022\015\023\060\024\054\025\021\026\014\027" +
    "\023\030\035\031\016\101\056\001\002\000\004\015\340" +
    "\001\002\000\004\101\341\001\002\000\006\004\342\005" +
    "\uffa4\001\002\000\030\010\125\012\123\054\122\060\121" +
    "\065\134\101\132\102\140\103\137\104\131\105\126\106" +
    "\133\001\002\000\036\005\uffa5\011\143\015\151\057\147" +
    "\060\141\061\144\062\153\063\154\064\142\066\156\067" +
    "\155\070\150\071\146\072\145\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\032\005\011\012\004\016\031\022\007\023" +
    "\005\026\016\031\027\032\025\033\012\034\033\035\026" +
    "\036\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\011\012\004\016\031\022\007\023\005\026\016\031\027" +
    "\032\025\033\012\034\033\035\026\036\037\001\001\000" +
    "\002\001\001\000\032\005\011\012\004\016\031\022\007" +
    "\023\005\026\016\031\027\032\025\033\012\034\033\035" +
    "\026\036\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\011\012\004\016\031\022\007\023\005\026" +
    "\016\031\027\032\025\033\012\034\033\035\026\036\044" +
    "\001\001\000\002\001\001\000\032\005\011\012\004\016" +
    "\031\022\007\023\005\026\016\031\027\032\025\033\012" +
    "\034\033\035\026\036\046\001\001\000\002\001\001\000" +
    "\032\005\011\012\004\016\031\022\007\023\005\026\016" +
    "\031\027\032\025\033\012\034\033\035\026\036\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\056" +
    "\022\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\100\004\110\010\075\011\107\012" +
    "\074\014\112\015\103\016\070\022\007\023\076\026\101" +
    "\031\104\032\113\033\073\034\111\035\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\207\004\110\011" +
    "\107\012\074\014\112\015\103\016\070\022\007\023\076" +
    "\026\101\031\104\032\113\033\073\034\111\035\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\214\011\126\021\123\024" +
    "\135\025\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\211\011\126\021\123\024\135\025\127\001" +
    "\001\000\014\002\204\011\126\021\123\024\135\025\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\176" +
    "\011\126\021\123\024\135\025\127\001\001\000\002\001" +
    "\001\000\014\002\172\011\126\021\123\024\135\025\127" +
    "\001\001\000\014\002\134\011\126\021\123\024\135\025" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\162\011\126\021\123\024\135\025\127\001\001\000" +
    "\014\002\161\011\126\021\123\024\135\025\127\001\001" +
    "\000\014\002\157\011\126\021\123\024\135\025\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\156\011\126\021\123" +
    "\024\135\025\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\151" +
    "\001\001\000\004\020\151\001\001\000\002\001\001\000" +
    "\004\020\151\001\001\000\006\006\163\020\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\166\006" +
    "\167\011\126\021\123\024\135\025\127\001\001\000\004" +
    "\020\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\173\020\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\151\001\001\000\042\003\100\004\110\010\206\011\107" +
    "\012\074\014\112\015\103\016\070\022\007\023\076\026" +
    "\101\031\104\032\113\033\073\034\111\035\072\001\001" +
    "\000\040\003\207\004\110\011\107\012\074\014\112\015" +
    "\103\016\070\022\007\023\076\026\101\031\104\032\113" +
    "\033\073\034\111\035\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\151\001\001\000\002\001" +
    "\001\000\014\002\217\011\126\021\123\024\135\025\127" +
    "\001\001\000\004\020\151\001\001\000\002\001\001\000" +
    "\042\003\100\004\110\010\222\011\107\012\074\014\112" +
    "\015\103\016\070\022\007\023\076\026\101\031\104\032" +
    "\113\033\073\034\111\035\072\001\001\000\042\003\207" +
    "\004\110\011\107\012\074\013\224\014\112\015\103\016" +
    "\070\022\007\023\076\026\101\031\104\032\113\033\073" +
    "\034\111\035\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\100\004\110\010\236\011\107\012\074" +
    "\014\112\015\103\016\070\022\007\023\076\026\101\031" +
    "\104\032\113\033\073\034\111\035\072\001\001\000\002" +
    "\001\001\000\014\002\230\011\126\021\123\024\135\025" +
    "\127\001\001\000\004\020\151\001\001\000\002\001\001" +
    "\000\042\003\100\004\110\010\233\011\107\012\074\014" +
    "\112\015\103\016\070\022\007\023\076\026\101\031\104" +
    "\032\113\033\073\034\111\035\072\001\001\000\042\003" +
    "\207\004\110\011\107\012\074\013\235\014\112\015\103" +
    "\016\070\022\007\023\076\026\101\031\104\032\113\033" +
    "\073\034\111\035\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\207\004\110\011\107\012\074\014" +
    "\112\015\103\016\070\022\007\023\076\026\101\031\104" +
    "\032\113\033\073\034\111\035\072\001\001\000\002\001" +
    "\001\000\042\003\100\004\110\010\241\011\107\012\074" +
    "\014\112\015\103\016\070\022\007\023\076\026\101\031" +
    "\104\032\113\033\073\034\111\035\072\001\001\000\040" +
    "\003\207\004\110\011\107\012\074\014\112\015\103\016" +
    "\070\022\007\023\076\026\101\031\104\032\113\033\073" +
    "\034\111\035\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\253\011\126\021\123\024\135\025\127\001\001" +
    "\000\004\020\151\001\001\000\002\001\001\000\042\003" +
    "\100\004\110\010\256\011\107\012\074\014\112\015\103" +
    "\016\070\022\007\023\076\026\101\031\104\032\113\033" +
    "\073\034\111\035\072\001\001\000\040\003\207\004\110" +
    "\011\107\012\074\014\112\015\103\016\070\022\007\023" +
    "\076\026\101\031\104\032\113\033\073\034\111\035\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\100\004\110\010\262\011\107\012\074\014\112\015\103" +
    "\016\070\022\007\023\076\026\101\031\104\032\113\033" +
    "\073\034\111\035\072\001\001\000\040\003\207\004\110" +
    "\011\107\012\074\014\112\015\103\016\070\022\007\023" +
    "\076\026\101\031\104\032\113\033\073\034\111\035\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\266\022\267\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\276\011\126\021\123\024\135\025\127" +
    "\027\275\001\001\000\016\002\300\011\126\021\123\024" +
    "\135\025\127\030\277\001\001\000\002\001\001\000\004" +
    "\020\151\001\001\000\002\001\001\000\004\020\151\001" +
    "\001\000\014\002\302\011\126\021\123\024\135\025\127" +
    "\001\001\000\004\020\151\001\001\000\014\002\305\011" +
    "\126\021\123\024\135\025\127\001\001\000\002\001\001" +
    "\000\004\020\151\001\001\000\014\002\307\011\126\021" +
    "\123\024\135\025\127\001\001\000\004\020\151\001\001" +
    "\000\002\001\001\000\032\005\011\012\004\016\031\022" +
    "\007\023\005\026\016\031\027\032\025\033\012\034\033" +
    "\035\026\036\312\001\001\000\002\001\001\000\032\005" +
    "\011\012\004\016\031\022\007\023\005\026\016\031\027" +
    "\032\025\033\012\034\033\035\026\036\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\317\011\126" +
    "\021\123\024\135\025\127\001\001\000\004\020\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\323" +
    "\022\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\100\004\110\010\326\011\107\012\074\014\112" +
    "\015\103\016\070\022\007\023\076\026\101\031\104\032" +
    "\113\033\073\034\111\035\072\001\001\000\040\003\207" +
    "\004\110\011\107\012\074\014\112\015\103\016\070\022" +
    "\007\023\076\026\101\031\104\032\113\033\073\034\111" +
    "\035\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\011\012\004\016\031\022\007\023\005\026\016" +
    "\031\027\032\025\033\012\034\033\035\026\036\332\001" +
    "\001\000\002\001\001\000\032\005\011\012\004\016\031" +
    "\022\007\023\005\026\016\031\027\032\025\033\012\034" +
    "\033\035\026\036\334\001\001\000\002\001\001\000\004" +
    "\022\336\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\342\011\126\021\123\024\135" +
    "\025\127\001\001\000\004\020\151\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors;

  public void syntax_error(Symbol current_token) {
    //syntaxErrors = true;
    report_error( "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right + "\n", null);
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= starter EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // starter ::= tdef SEMI starter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starter",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // starter ::= fdef SEMI starter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starter",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // starter ::= var_assignment SEMI starter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starter",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // starter ::= dict_assignment SEMI starter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starter",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // starter ::= seq_assignment SEMI starter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starter",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // starter ::= var_declaration SEMI starter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starter",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // starter ::= seq_declaration SEMI starter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starter",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // starter ::= dict_declaration SEMI starter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starter",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // starter ::= thread_assignment SEMI starter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starter",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // starter ::= main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starter",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // main ::= MAIN L_CURL_PAREN stmnt_list R_CURL_PAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= function_call SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= compound_stmnt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= var_assignment SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= var_declaration SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= seq_assignment SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= seq_declaration SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= dict_assignment SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= dict_declaration SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= thread_assignment SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= return SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= break SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= PRINT expr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= tdef SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= fdef SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr binary_operator expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= unary_operator expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= L_SOFT_PAREN expr R_SOFT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= READ SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= RATIONAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= seq_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= seq_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // compound_stmnt ::= FORALL L_SOFT_PAREN IDENTIFIER IN expr R_SOFT_PAREN DO stmnt_list OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmnt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // compound_stmnt ::= WHILE expr DO stmnt_list OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmnt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // compound_stmnt ::= IF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmnt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // compound_stmnt ::= IF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list elif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmnt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // compound_stmnt ::= IF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list ELSE stmnt_list FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmnt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // compound_stmnt ::= IF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list elif ELSE stmnt_list FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmnt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // binary_operator ::= SMALLER_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // binary_operator ::= BIGGER_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // binary_operator ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // binary_operator ::= NOT_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // binary_operator ::= L_TRI_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // binary_operator ::= R_TRI_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // binary_operator ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // binary_operator ::= MULTI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // binary_operator ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // binary_operator ::= POWER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // binary_operator ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // binary_operator ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // binary_operator ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unary_operator ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unary_operator ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_list ::= COMMA expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_list ::= COMMA expr_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= DICTIONARY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= SEQUENCE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= SET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // type ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type ::= STRING_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type_list ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type_list ::= type_list COMMA type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // stmnt_list ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmnt_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stmnt_list ::= stmnt_list statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmnt_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // function_call ::= IDENTIFIER L_SOFT_PAREN expr R_SOFT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // function_call ::= IDENTIFIER L_SOFT_PAREN expr expr_list R_SOFT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // elif ::= ELIF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // elif ::= ELIF L_SOFT_PAREN expr R_SOFT_PAREN THEN stmnt_list elif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // return ::= RETURN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // return ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // break ::= BREAK expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // break ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // fdef ::= FUN_DEF type IDENTIFIER L_SOFT_PAREN var_list R_SOFT_PAREN L_CURL_PAREN stmnt_list R_CURL_PAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // var_assignment ::= type IDENTIFIER ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_assignment",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // var_assignment ::= IDENTIFIER ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_assignment",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // var_declaration ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tdef ::= TYPE_DEF IDENTIFIER L_CURL_PAREN var_list R_CURL_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tdef",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // var_list ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // var_list ::= var_list COMMA type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // seq_assignment ::= SEQUENCE L_TRI_PAREN type R_TRI_PAREN IDENTIFIER ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_assignment",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // seq_declaration ::= SEQUENCE L_TRI_PAREN type R_TRI_PAREN IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_declaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // seq_literal ::= L_SQ_PAREN expr expr_list R_SQ_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // seq_call ::= L_SQ_PAREN expr R_SQ_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_call",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dict_assignment ::= DICTIONARY L_TRI_PAREN type_list R_TRI_PAREN IDENTIFIER ASSIGN dict_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_assignment",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dict_assignment ::= DICTIONARY L_TRI_PAREN type_list R_TRI_PAREN IDENTIFIER ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_assignment",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // dict_declaration ::= DICTIONARY L_TRI_PAREN type_list R_TRI_PAREN IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_declaration",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // dict_literal ::= L_SOFT_PAREN dict_element_list R_SOFT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // dict_element_list ::= expr COLON expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // dict_element_list ::= dict_element_list COMMA expr COLON expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // thread_assignment ::= THREAD IDENTIFIER ASSIGN L_CURL_PAREN stmnt_list R_CURL_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("thread_assignment",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
